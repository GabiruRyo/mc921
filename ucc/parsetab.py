
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDleftEQUALSNEleftGTGTELTLTEleftPLUSMINUSleftTIMESDIVIDEMODADDRESS AND ASSERT ASSIGN BREAK CHAR CHAR_CONST COMMA DIVIDE DIVIDEASSIGN ELSE EQUALS FLOAT FLOAT_CONST FOR GT GTE ID IF INT INT_CONST LBRACE LBRACKET LPAREN LT LTE MINUS MINUSASSIGN MINUSMINUS MOD MODASSIGN NE NOT OR PLUS PLUSASSIGN PLUSPLUS PRINT RBRACE RBRACKET READ RETURN RPAREN SEMI STRING_CONST TIMES TIMESASSIGN VOID WHILE program  : global_declaration_list\n         global_declaration_list : global_declaration\n                                    | global_declaration_list global_declaration\n         global_declaration : declaration\n         global_declaration : function_definition\n         function_definition : type_specifier declarator declaration_list_opt compound_statement\n         function_definition : declarator declaration_list_opt compound_statement\n         declarator : direct_declarator\n         declaration : decl_body SEMI\n         decl_body : type_specifier init_declarator_list\n                      | type_specifier empty\n         init_declarator : declarator\n                            | declarator ASSIGN initializer\n         init_declarator_list : init_declarator\n                                 | init_declarator_list COMMA init_declarator\n         initializer : assignment_expression\n         initializer : LBRACE initializer_list RBRACE\n                        | LBRACE initializer_list COMMA RBRACE\n         initializer_list : initializer\n                             | initializer_list COMMA initializer\n         declaration_list : declaration\n                             | declaration_list declaration\n         declaration_list_opt : declaration_list\n                                 | empty\n         direct_declarator : identifier\n         direct_declarator : LPAREN declarator RPAREN\n         direct_declarator : direct_declarator LBRACKET constant_expression RBRACKET\n                              | direct_declarator LBRACKET empty RBRACKET\n         direct_declarator : direct_declarator LPAREN parameter_list RPAREN\n                              | direct_declarator LPAREN identifier_list RPAREN\n                              | direct_declarator LPAREN empty RPAREN\n         constant_expression : binary_expression\n         block_item  : declaration\n                        | statement\n         block_item_list : block_item\n                            | block_item_list block_item\n         compound_statement   : LBRACE block_item_list RBRACE\n         selection_statement : IF LPAREN expression RPAREN statement\n                                | IF LPAREN expression RPAREN statement ELSE statement\n         iteration_statement : WHILE LPAREN expression RPAREN statement\n         iteration_statement : FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement\n         iteration_statement : FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement\n         expression_statement : expression SEMI\n                                 | empty SEMI\n         assert_statement : ASSERT expression SEMI\n         print_statement : PRINT LPAREN expression RPAREN SEMI\n                            | PRINT LPAREN empty RPAREN SEMI\n         read_statement : READ LPAREN argument_expression RPAREN SEMI\n         jump_statement  : BREAK SEMI\n         jump_statement  : RETURN expression_opt SEMI\n         statement   : expression_statement\n                        | selection_statement\n                        | compound_statement\n                        | iteration_statement\n                        | jump_statement\n                        | assert_statement\n                        | print_statement\n                        | read_statement\n         empty :\n         type_specifier : VOID\n                           | CHAR\n                           | INT\n                           | FLOAT\n         binary_expression   : cast_expression\n                                | binary_expression TIMES binary_expression\n                                | binary_expression DIVIDE binary_expression\n                                | binary_expression MOD binary_expression\n                                | binary_expression PLUS binary_expression\n                                | binary_expression MINUS binary_expression\n                                | binary_expression LT binary_expression\n                                | binary_expression LTE binary_expression\n                                | binary_expression GT binary_expression\n                                | binary_expression GTE binary_expression\n                                | binary_expression EQUALS binary_expression\n                                | binary_expression NE binary_expression\n                                | binary_expression AND binary_expression\n                                | binary_expression OR binary_expression\n         cast_expression : unary_expression\n         cast_expression : LPAREN type_specifier RPAREN cast_expression\n         unary_expression : postfix_expression\n         unary_expression : PLUSPLUS unary_expression\n                             | MINUSMINUS unary_expression\n                             | unary_operator cast_expression\n         unary_operator : ADDRESS\n                           | TIMES\n                           | PLUS\n                           | MINUS\n                           | NOT\n         postfix_expression : primary_expression\n         postfix_expression : postfix_expression LBRACKET expression RBRACKET\n         postfix_expression : postfix_expression LPAREN argument_expression RPAREN\n                               | postfix_expression LPAREN RPAREN\n         postfix_expression : postfix_expression PLUSPLUS\n                               | postfix_expression MINUSMINUS\n         constant : INT_CONST\n         constant : FLOAT_CONST\n         constant : CHAR_CONST\n         constant : STRING_CONST\n         expression : assignment_expression\n                       | expression COMMA assignment_expression\n         expression_opt : expression\n                           | empty\n         argument_expression : assignment_expression\n                                | argument_expression COMMA assignment_expression\n         assignment_expression : binary_expression\n                                  | unary_expression assignment_operator assignment_expression\n         assignment_operator : ASSIGN\n                                | TIMESASSIGN\n                                | DIVIDEASSIGN\n                                | MODASSIGN\n                                | PLUSASSIGN\n                                | MINUSASSIGN\n         primary_expression : identifier\n                               | constant\n         primary_expression : LPAREN expression RPAREN\n         identifier : ID\n         identifier_list : identifier\n                            | identifier_list COMMA identifier\n         parameter_list : parameter_declaration\n                           | parameter_list COMMA parameter_declaration\n         parameter_declaration  : type_specifier declarator\n        '
    
_lr_action_items = {'VOID':([0,2,3,4,5,8,13,14,16,17,18,19,24,26,29,34,35,36,46,66,67,74,75,76,77,78,79,80,81,82,83,84,85,97,98,122,123,124,126,137,138,139,140,144,145,181,182,200,201,204,205,206,210,214,215,],[9,9,-2,-4,-5,9,-8,-25,-116,-3,-9,9,9,-21,9,-7,9,-22,9,-26,-6,9,-35,-33,-34,-51,-52,-53,-54,-55,-56,-57,-58,-27,-28,-29,9,-30,-31,-37,-36,-44,-43,9,-49,-50,-45,-38,-40,-46,-47,-48,-39,-42,-41,]),'CHAR':([0,2,3,4,5,8,13,14,16,17,18,19,24,26,29,34,35,36,46,66,67,74,75,76,77,78,79,80,81,82,83,84,85,97,98,122,123,124,126,137,138,139,140,144,145,181,182,200,201,204,205,206,210,214,215,],[10,10,-2,-4,-5,10,-8,-25,-116,-3,-9,10,10,-21,10,-7,10,-22,10,-26,-6,10,-35,-33,-34,-51,-52,-53,-54,-55,-56,-57,-58,-27,-28,-29,10,-30,-31,-37,-36,-44,-43,10,-49,-50,-45,-38,-40,-46,-47,-48,-39,-42,-41,]),'INT':([0,2,3,4,5,8,13,14,16,17,18,19,24,26,29,34,35,36,46,66,67,74,75,76,77,78,79,80,81,82,83,84,85,97,98,122,123,124,126,137,138,139,140,144,145,181,182,200,201,204,205,206,210,214,215,],[11,11,-2,-4,-5,11,-8,-25,-116,-3,-9,11,11,-21,11,-7,11,-22,11,-26,-6,11,-35,-33,-34,-51,-52,-53,-54,-55,-56,-57,-58,-27,-28,-29,11,-30,-31,-37,-36,-44,-43,11,-49,-50,-45,-38,-40,-46,-47,-48,-39,-42,-41,]),'FLOAT':([0,2,3,4,5,8,13,14,16,17,18,19,24,26,29,34,35,36,46,66,67,74,75,76,77,78,79,80,81,82,83,84,85,97,98,122,123,124,126,137,138,139,140,144,145,181,182,200,201,204,205,206,210,214,215,],[12,12,-2,-4,-5,12,-8,-25,-116,-3,-9,12,12,-21,12,-7,12,-22,12,-26,-6,12,-35,-33,-34,-51,-52,-53,-54,-55,-56,-57,-58,-27,-28,-29,12,-30,-31,-37,-36,-44,-43,12,-49,-50,-45,-38,-40,-46,-47,-48,-39,-42,-41,]),'LPAREN':([0,2,3,4,5,7,9,10,11,12,13,14,15,16,17,18,27,28,32,33,34,35,42,43,44,46,47,48,49,50,51,52,53,54,55,56,57,58,59,65,66,67,70,74,75,76,77,78,79,80,81,82,83,84,85,88,89,90,92,93,94,95,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,114,115,116,117,119,122,124,126,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,150,151,165,166,169,174,180,181,182,187,188,189,192,193,194,200,201,203,204,205,206,207,208,210,212,213,214,215,],[15,15,-2,-4,-5,15,-60,-61,-62,-63,29,-25,15,-116,-3,-9,15,46,46,15,-7,46,-85,-86,-87,46,115,119,119,46,-89,-84,-88,-113,-114,-95,-96,-97,-98,15,-26,-6,46,46,-35,-33,-34,-51,-52,-53,-54,-55,-56,-57,-58,142,143,144,46,46,150,151,-27,-28,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,-93,-94,46,-29,-30,-31,46,-107,-108,-109,-110,-111,-112,-37,-36,-44,-43,46,46,46,46,-49,46,46,46,-115,-92,46,46,-50,-45,-90,-91,46,46,46,46,-38,-40,46,-46,-47,-48,46,46,-39,46,46,-42,-41,]),'ID':([0,2,3,4,5,7,9,10,11,12,15,17,18,27,28,29,32,33,34,35,42,43,44,46,48,49,50,52,53,65,67,70,74,75,76,77,78,79,80,81,82,83,84,85,92,93,99,100,101,102,103,104,105,106,107,108,109,110,111,114,115,119,125,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,150,151,165,174,180,181,182,189,192,193,194,200,201,203,204,205,206,207,208,210,212,213,214,215,],[16,16,-2,-4,-5,16,-60,-61,-62,-63,16,-3,-9,16,16,16,16,16,-7,16,-85,-86,-87,16,16,16,16,-84,-88,16,-6,16,16,-35,-33,-34,-51,-52,-53,-54,-55,-56,-57,-58,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,-107,-108,-109,-110,-111,-112,-37,-36,-44,-43,16,16,16,16,-49,16,16,16,16,16,-50,-45,16,16,16,16,-38,-40,16,-46,-47,-48,16,16,-39,16,16,-42,-41,]),'$end}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_declaration_list':([0,],[2,]),'global_declaration':([0,2,],[3,17,]),'declaration':([0,2,8,19,24,35,74,144,],[4,4,26,26,36,76,76,180,]),'function_definition':([0,2,],[5,5,]),'decl_body':([0,2,8,19,24,35,74,144,],[6,6,6,6,6,6,6,6,]),'type_specifier':([0,2,8,19,24,29,35,46,74,123,144,],[7,7,27,27,27,65,27,112,27,65,27,]),'declarator':([0,2,7,15,27,33,65,],[8,8,19,30,37,37,127,]),'direct_declarator':([0,2,7,15,27,33,65,],[13,13,13,13,13,13,13,]),'identifier':([0,2,7,15,27,28,29,32,33,35,46,48,49,50,65,70,74,92,93,99,100,101,102,103,104,105,106,107,108,109,110,111,114,115,119,125,130,141,142,143,144,150,151,165,174,180,189,192,193,194,203,207,208,212,213,],[14,14,14,14,14,54,64,54,14,54,54,54,54,54,14,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,172,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'init_declarator_list':([7,27,],[20,20,]),'empty':([7,8,19,27,28,29,35,74,92,144,150,180,192,193,194,203,207,208,212,213,],[21,25,25,21,39,62,86,86,148,148,184,148,86,86,148,148,86,148,86,86,]),'init_declarator':([7,27,33,],[22,22,73,]),'declaration_list_opt':([8,19,],[23,31,]),'declaration_list':([8,19,],[24,24,]),'compound_statement':([23,31,35,74,192,193,207,212,213,],[34,67,80,80,80,80,80,80,80,]),'constant_expression':([28,],[38,]),'binary_expression':([28,32,35,46,70,74,92,93,99,100,101,102,103,104,105,106,107,108,109,110,111,114,115,119,130,141,142,143,144,150,151,174,180,189,192,193,194,203,207,208,212,213,],[40,71,71,71,71,71,71,71,152,153,154,155,156,157,158,159,160,161,162,163,164,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'cast_expression':([28,32,35,46,50,70,74,92,93,99,100,101,102,103,104,105,106,107,108,109,110,111,114,115,119,130,141,142,143,144,150,151,165,174,180,189,192,193,194,203,207,208,212,213,],[41,41,41,41,121,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,186,41,41,41,41,41,41,41,41,41,41,41,]),'unary_expression':([28,32,35,46,48,49,50,70,74,92,93,99,100,101,102,103,104,105,106,107,108,109,110,111,114,115,119,130,141,142,143,144,150,151,165,174,180,189,192,193,194,203,207,208,212,213,],[45,72,72,72,118,120,45,72,72,72,72,45,45,45,45,45,45,45,45,45,45,45,45,45,72,72,72,72,72,72,72,72,72,72,45,72,72,72,72,72,72,72,72,72,72,72,]),'postfix_expression':([28,32,35,46,48,49,50,70,74,92,93,99,100,101,102,103,104,105,106,107,108,109,110,111,114,115,119,130,141,142,143,144,150,151,165,174,180,189,192,193,194,203,207,208,212,213,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'unary_operator':([28,32,35,46,48,49,50,70,74,92,93,99,100,101,102,103,104,105,106,107,108,109,110,111,114,115,119,130,141,142,143,144,150,151,165,174,180,189,192,193,194,203,207,208,212,213,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'primary_expression':([28,32,35,46,48,49,50,70,74,92,93,99,100,101,102,103,104,105,106,107,108,109,110,111,114,115,119,130,141,142,143,144,150,151,165,174,180,189,192,193,194,203,207,208,212,213,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'constant':([28,32,35,46,48,49,50,70,74,92,93,99,100,101,102,103,104,105,106,107,108,109,110,111,114,115,119,130,141,142,143,144,150,151,165,174,180,189,192,193,194,203,207,208,212,213,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'parameter_list':([29,],[60,]),'identifier_list':([29,],[61,]),'parameter_declaration':([29,123,],[63,171,]),'initializer':([32,70,174,],[68,129,191,]),'assignment_expression':([32,35,46,70,74,92,93,114,115,119,130,141,142,143,144,150,151,174,180,189,192,193,194,203,207,208,212,213,],[69,96,96,69,96,96,96,96,170,96,175,176,96,96,96,96,170,69,96,199,96,96,96,96,96,96,96,96,]),'block_item_list':([35,],[74,]),'block_item':([35,74,],[75,138,]),'statement':([35,74,192,193,207,212,213,],[77,77,200,201,210,214,215,]),'expression_statement':([35,74,192,193,207,212,213,],[78,78,78,78,78,78,78,]),'selection_statement':([35,74,192,193,207,212,213,],[79,79,79,79,79,79,79,]),'iteration_statement':([35,74,192,193,207,212,213,],[81,81,81,81,81,81,81,]),'jump_statement':([35,74,192,193,207,212,213,],[82,82,82,82,82,82,82,]),'assert_statement':([35,74,192,193,207,212,213,],[83,83,83,83,83,83,83,]),'print_statement':([35,74,192,193,207,212,213,],[84,84,84,84,84,84,84,]),'read_statement':([35,74,192,193,207,212,213,],[85,85,85,85,85,85,85,]),'expression':([35,46,74,92,93,114,119,142,143,144,150,180,192,193,194,203,207,208,212,213,],[87,113,87,147,149,167,113,177,178,147,183,147,87,87,147,147,87,147,87,87,]),'initializer_list':([70,],[128,]),'assignment_operator':([72,],[130,]),'expression_opt':([92,144,180,194,203,208,],[146,179,195,202,209,211,]),'argument_expression':([115,151,],[168,185,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global_declaration_list','program',1,'p_program','parser.py',149),
  ('global_declaration_list -> global_declaration','global_declaration_list',1,'p_global_declaration_list','parser.py',154),
  ('global_declaration_list -> global_declaration_list global_declaration','global_declaration_list',2,'p_global_declaration_list','parser.py',155),
  ('global_declaration -> declaration','global_declaration',1,'p_global_declaration_1','parser.py',160),
  ('global_declaration -> function_definition','global_declaration',1,'p_global_declaration_2','parser.py',165),
  ('function_definition -> type_specifier declarator declaration_list_opt compound_statement','function_definition',4,'p_function_definition_1','parser.py',170),
  ('function_definition -> declarator declaration_list_opt compound_statement','function_definition',3,'p_function_definition_2','parser.py',175),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','parser.py',184),
  ('declaration -> decl_body SEMI','declaration',2,'p_declaration','parser.py',189),
  ('decl_body -> type_specifier init_declarator_list','decl_body',2,'p_decl_body','parser.py',194),
  ('decl_body -> type_specifier empty','decl_body',2,'p_decl_body','parser.py',195),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','parser.py',203),
  ('init_declarator -> declarator ASSIGN initializer','init_declarator',3,'p_init_declarator','parser.py',204),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','parser.py',209),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','parser.py',210),
  ('initializer -> assignment_expression','initializer',1,'p_initializer_1','parser.py',215),
  ('initializer -> LBRACE initializer_list RBRACE','initializer',3,'p_initializer_2','parser.py',220),
  ('initializer -> LBRACE initializer_list COMMA RBRACE','initializer',4,'p_initializer_2','parser.py',221),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','parser.py',227),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','parser.py',228),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',237),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',238),
  ('declaration_list_opt -> declaration_list','declaration_list_opt',1,'p_declaration_list_opt','parser.py',243),
  ('declaration_list_opt -> empty','declaration_list_opt',1,'p_declaration_list_opt','parser.py',244),
  ('direct_declarator -> identifier','direct_declarator',1,'p_direct_declarator_1','parser.py',249),
  ('direct_declarator -> LPAREN declarator RPAREN','direct_declarator',3,'p_direct_declarator_2','parser.py',254),
  ('direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET','direct_declarator',4,'p_direct_declarator_3','parser.py',259),
  ('direct_declarator -> direct_declarator LBRACKET empty RBRACKET','direct_declarator',4,'p_direct_declarator_3','parser.py',260),
  ('direct_declarator -> direct_declarator LPAREN parameter_list RPAREN','direct_declarator',4,'p_direct_declarator_4','parser.py',266),
  ('direct_declarator -> direct_declarator LPAREN identifier_list RPAREN','direct_declarator',4,'p_direct_declarator_4','parser.py',267),
  ('direct_declarator -> direct_declarator LPAREN empty RPAREN','direct_declarator',4,'p_direct_declarator_4','parser.py',268),
  ('constant_expression -> binary_expression','constant_expression',1,'p_constant_expression','parser.py',274),
  ('block_item -> declaration','block_item',1,'p_block_item','parser.py',279),
  ('block_item -> statement','block_item',1,'p_block_item','parser.py',280),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','parser.py',285),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','parser.py',286),
  ('compound_statement -> LBRACE block_item_list RBRACE','compound_statement',3,'p_compound_statement','parser.py',293),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement','parser.py',298),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement','parser.py',299),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement_1','parser.py',304),
  ('iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement','iteration_statement',9,'p_iteration_statement_2','parser.py',309),
  ('iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement','iteration_statement',8,'p_iteration_statement_3','parser.py',314),
  ('expression_statement -> expression SEMI','expression_statement',2,'p_expression_statement','parser.py',319),
  ('expression_statement -> empty SEMI','expression_statement',2,'p_expression_statement','parser.py',320),
  ('assert_statement -> ASSERT expression SEMI','assert_statement',3,'p_assert_statement','parser.py',328),
  ('print_statement -> PRINT LPAREN expression RPAREN SEMI','print_statement',5,'p_print_statement','parser.py',333),
  ('print_statement -> PRINT LPAREN empty RPAREN SEMI','print_statement',5,'p_print_statement','parser.py',334),
  ('read_statement -> READ LPAREN argument_expression RPAREN SEMI','read_statement',5,'p_read_statement','parser.py',339),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement_1','parser.py',344),
  ('jump_statement -> RETURN expression_opt SEMI','jump_statement',3,'p_jump_statement_2','parser.py',349),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',354),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',355),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',356),
  ('statement -> iteration_statement','statement',1,'p_statement','parser.py',357),
  ('statement -> jump_statement','statement',1,'p_statement','parser.py',358),
  ('statement -> assert_statement','statement',1,'p_statement','parser.py',359),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',360),
  ('statement -> read_statement','statement',1,'p_statement','parser.py',361),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',366),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','parser.py',371),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser.py',372),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',373),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','parser.py',374),
  ('binary_expression -> cast_expression','binary_expression',1,'p_binary_expression','parser.py',379),
  ('binary_expression -> binary_expression TIMES binary_expression','binary_expression',3,'p_binary_expression','parser.py',380),
  ('binary_expression -> binary_expression DIVIDE binary_expression','binary_expression',3,'p_binary_expression','parser.py',381),
  ('binary_expression -> binary_expression MOD binary_expression','binary_expression',3,'p_binary_expression','parser.py',382),
  ('binary_expression -> binary_expression PLUS binary_expression','binary_expression',3,'p_binary_expression','parser.py',383),
  ('binary_expression -> binary_expression MINUS binary_expression','binary_expression',3,'p_binary_expression','parser.py',384),
  ('binary_expression -> binary_expression LT binary_expression','binary_expression',3,'p_binary_expression','parser.py',385),
  ('binary_expression -> binary_expression LTE binary_expression','binary_expression',3,'p_binary_expression','parser.py',386),
  ('binary_expression -> binary_expression GT binary_expression','binary_expression',3,'p_binary_expression','parser.py',387),
  ('binary_expression -> binary_expression GTE binary_expression','binary_expression',3,'p_binary_expression','parser.py',388),
  ('binary_expression -> binary_expression EQUALS binary_expression','binary_expression',3,'p_binary_expression','parser.py',389),
  ('binary_expression -> binary_expression NE binary_expression','binary_expression',3,'p_binary_expression','parser.py',390),
  ('binary_expression -> binary_expression AND binary_expression','binary_expression',3,'p_binary_expression','parser.py',391),
  ('binary_expression -> binary_expression OR binary_expression','binary_expression',3,'p_binary_expression','parser.py',392),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression_1','parser.py',397),
  ('cast_expression -> LPAREN type_specifier RPAREN cast_expression','cast_expression',4,'p_cast_expression_2','parser.py',402),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression_1','parser.py',407),
  ('unary_expression -> PLUSPLUS unary_expression','unary_expression',2,'p_unary_expression_2','parser.py',412),
  ('unary_expression -> MINUSMINUS unary_expression','unary_expression',2,'p_unary_expression_2','parser.py',413),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_2','parser.py',414),
  ('unary_operator -> ADDRESS','unary_operator',1,'p_unary_operator','parser.py',419),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','parser.py',420),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','parser.py',421),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','parser.py',422),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','parser.py',423),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression_1','parser.py',428),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression_2','parser.py',433),
  ('postfix_expression -> postfix_expression LPAREN argument_expression RPAREN','postfix_expression',4,'p_postfix_expression_3','parser.py',438),
  ('postfix_expression -> postfix_expression LPAREN RPAREN','postfix_expression',3,'p_postfix_expression_3','parser.py',439),
  ('postfix_expression -> postfix_expression PLUSPLUS','postfix_expression',2,'p_postfix_expression_4','parser.py',444),
  ('postfix_expression -> postfix_expression MINUSMINUS','postfix_expression',2,'p_postfix_expression_4','parser.py',445),
  ('constant -> INT_CONST','constant',1,'p_constant_1','parser.py',450),
  ('constant -> FLOAT_CONST','constant',1,'p_constant_2','parser.py',455),
  ('constant -> CHAR_CONST','constant',1,'p_constant_3','parser.py',460),
  ('constant -> STRING_CONST','constant',1,'p_constant_4','parser.py',465),
  ('expression -> assignment_expression','expression',1,'p_expression','parser.py',470),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','parser.py',471),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','parser.py',479),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','parser.py',480),
  ('argument_expression -> assignment_expression','argument_expression',1,'p_argument_expression','parser.py',485),
  ('argument_expression -> argument_expression COMMA assignment_expression','argument_expression',3,'p_argument_expression','parser.py',486),
  ('assignment_expression -> binary_expression','assignment_expression',1,'p_assignment_expression','parser.py',494),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','parser.py',495),
  ('assignment_operator -> ASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',503),
  ('assignment_operator -> TIMESASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',504),
  ('assignment_operator -> DIVIDEASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',505),
  ('assignment_operator -> MODASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',506),
  ('assignment_operator -> PLUSASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',507),
  ('assignment_operator -> MINUSASSIGN','assignment_operator',1,'p_assignment_operator','parser.py',508),
  ('primary_expression -> identifier','primary_expression',1,'p_primary_expression_1','parser.py',513),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression_1','parser.py',514),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression_2','parser.py',519),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',524),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',529),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',530),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','parser.py',538),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','parser.py',539),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','parser.py',547),
]
