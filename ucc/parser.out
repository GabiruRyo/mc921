Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> global_declaration_list
Rule 2     global_declaration_list -> global_declaration
Rule 3     global_declaration_list -> global_declaration_list global_declaration
Rule 4     global_declaration -> declaration
Rule 5     global_declaration -> function_definition
Rule 6     function_definition -> type_specifier declarator declaration_list_opt compound_statement
Rule 7     function_definition -> declarator declaration_list_opt compound_statement
Rule 8     declarator -> direct_declarator
Rule 9     declaration -> decl_body SEMI
Rule 10    decl_body -> type_specifier init_declarator_list
Rule 11    decl_body -> type_specifier empty
Rule 12    init_declarator -> declarator
Rule 13    init_declarator -> declarator ASSIGN initializer
Rule 14    init_declarator_list -> init_declarator
Rule 15    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 16    initializer -> assignment_expression
Rule 17    initializer -> LBRACE initializer_list RBRACE
Rule 18    initializer -> LBRACE initializer_list COMMA RBRACE
Rule 19    initializer_list -> initializer
Rule 20    initializer_list -> initializer_list COMMA initializer
Rule 21    declaration_list -> declaration
Rule 22    declaration_list -> declaration_list declaration
Rule 23    declaration_list_opt -> declaration_list
Rule 24    declaration_list_opt -> empty
Rule 25    direct_declarator -> identifier
Rule 26    direct_declarator -> LPAREN declarator RPAREN
Rule 27    direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET
Rule 28    direct_declarator -> direct_declarator LBRACKET empty RBRACKET
Rule 29    direct_declarator -> direct_declarator LPAREN parameter_list RPAREN
Rule 30    direct_declarator -> direct_declarator LPAREN identifier_list RPAREN
Rule 31    direct_declarator -> direct_declarator LPAREN empty RPAREN
Rule 32    constant_expression -> binary_expression
Rule 33    block_item -> declaration
Rule 34    block_item -> statement
Rule 35    block_item_list -> block_item
Rule 36    block_item_list -> block_item_list block_item
Rule 37    compound_statement -> LBRACE block_item_list RBRACE
Rule 38    selection_statement -> IF LPAREN expression RPAREN statement
Rule 39    selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 40    iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 41    iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
Rule 42    iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
Rule 43    expression_statement -> expression SEMI
Rule 44    expression_statement -> empty SEMI
Rule 45    assert_statement -> ASSERT expression SEMI
Rule 46    print_statement -> PRINT LPAREN expression RPAREN SEMI
Rule 47    print_statement -> PRINT LPAREN empty RPAREN SEMI
Rule 48    read_statement -> READ LPAREN argument_expression RPAREN SEMI
Rule 49    jump_statement -> BREAK SEMI
Rule 50    jump_statement -> RETURN expression_opt SEMI
Rule 51    statement -> expression_statement
Rule 52    statement -> selection_statement
Rule 53    statement -> compound_statement
Rule 54    statement -> iteration_statement
Rule 55    statement -> jump_statement
Rule 56    statement -> assert_statement
Rule 57    statement -> print_statement
Rule 58    statement -> read_statement
Rule 59    empty -> <empty>
Rule 60    type_specifier -> VOID
Rule 61    type_specifier -> CHAR
Rule 62    type_specifier -> INT
Rule 63    type_specifier -> FLOAT
Rule 64    binary_expression -> cast_expression
Rule 65    binary_expression -> binary_expression TIMES binary_expression
Rule 66    binary_expression -> binary_expression DIVIDE binary_expression
Rule 67    binary_expression -> binary_expression MOD binary_expression
Rule 68    binary_expression -> binary_expression PLUS binary_expression
Rule 69    binary_expression -> binary_expression MINUS binary_expression
Rule 70    binary_expression -> binary_expression LT binary_expression
Rule 71    binary_expression -> binary_expression LTE binary_expression
Rule 72    binary_expression -> binary_expression GT binary_expression
Rule 73    binary_expression -> binary_expression GTE binary_expression
Rule 74    binary_expression -> binary_expression EQUALS binary_expression
Rule 75    binary_expression -> binary_expression NE binary_expression
Rule 76    binary_expression -> binary_expression AND binary_expression
Rule 77    binary_expression -> binary_expression OR binary_expression
Rule 78    cast_expression -> unary_expression
Rule 79    cast_expression -> LPAREN type_specifier RPAREN cast_expression
Rule 80    unary_expression -> postfix_expression
Rule 81    unary_expression -> PLUSPLUS unary_expression
Rule 82    unary_expression -> MINUSMINUS unary_expression
Rule 83    unary_expression -> unary_operator cast_expression
Rule 84    unary_operator -> ADDRESS
Rule 85    unary_operator -> TIMES
Rule 86    unary_operator -> PLUS
Rule 87    unary_operator -> MINUS
Rule 88    unary_operator -> NOT
Rule 89    postfix_expression -> primary_expression
Rule 90    postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 91    postfix_expression -> postfix_expression LPAREN argument_expression RPAREN
Rule 92    postfix_expression -> postfix_expression LPAREN RPAREN
Rule 93    postfix_expression -> postfix_expression PLUSPLUS
Rule 94    postfix_expression -> postfix_expression MINUSMINUS
Rule 95    constant -> INT_CONST
Rule 96    constant -> FLOAT_CONST
Rule 97    constant -> CHAR_CONST
Rule 98    constant -> STRING_CONST
Rule 99    expression -> assignment_expression
Rule 100   expression -> expression COMMA assignment_expression
Rule 101   expression_opt -> expression
Rule 102   expression_opt -> empty
Rule 103   argument_expression -> assignment_expression
Rule 104   argument_expression -> argument_expression COMMA assignment_expression
Rule 105   assignment_expression -> binary_expression
Rule 106   assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 107   assignment_operator -> ASSIGN
Rule 108   assignment_operator -> TIMESASSIGN
Rule 109   assignment_operator -> DIVIDEASSIGN
Rule 110   assignment_operator -> MODASSIGN
Rule 111   assignment_operator -> PLUSASSIGN
Rule 112   assignment_operator -> MINUSASSIGN
Rule 113   primary_expression -> identifier
Rule 114   primary_expression -> constant
Rule 115   primary_expression -> LPAREN expression RPAREN
Rule 116   identifier -> ID
Rule 117   identifier_list -> identifier
Rule 118   identifier_list -> identifier_list COMMA identifier
Rule 119   parameter_list -> parameter_declaration
Rule 120   parameter_list -> parameter_list COMMA parameter_declaration
Rule 121   parameter_declaration -> type_specifier declarator

Terminals, with rules where they appear

ADDRESS              : 84
AND                  : 76
ASSERT               : 45
ASSIGN               : 13 107
BREAK                : 49
CHAR                 : 61
CHAR_CONST           : 97
COMMA                : 15 18 20 100 104 118 120
DIVIDE               : 66
DIVIDEASSIGN         : 109
ELSE                 : 39
EQUALS               : 74
FLOAT                : 63
FLOAT_CONST          : 96
FOR                  : 41 42
GT                   : 72
GTE                  : 73
ID                   : 116
IF                   : 38 39
INT                  : 62
INT_CONST            : 95
LBRACE               : 17 18 37
LBRACKET             : 27 28 90
LPAREN               : 26 29 30 31 38 39 40 41 42 46 47 48 79 91 92 115
LT                   : 70
LTE                  : 71
MINUS                : 69 87
MINUSASSIGN          : 112
MINUSMINUS           : 82 94
MOD                  : 67
MODASSIGN            : 110
NE                   : 75
NOT                  : 88
OR                   : 77
PLUS                 : 68 86
PLUSASSIGN           : 111
PLUSPLUS             : 81 93
PRINT                : 46 47
RBRACE               : 17 18 37
RBRACKET             : 27 28 90
READ                 : 48
RETURN               : 50
RPAREN               : 26 29 30 31 38 39 40 41 42 46 47 48 79 91 92 115
SEMI                 : 9 41 41 42 43 44 45 46 47 48 49 50
STRING_CONST         : 98
TIMES                : 65 85
TIMESASSIGN          : 108
VOID                 : 60
WHILE                : 40
error                : 

Nonterminals, with rules where they appear

argument_expression  : 48 91 104
assert_statement     : 56
assignment_expression : 16 99 100 103 104 106
assignment_operator  : 106
binary_expression    : 32 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 105
block_item           : 35 36
block_item_list      : 36 37
cast_expression      : 64 79 83
compound_statement   : 6 7 53
constant             : 114
constant_expression  : 27
decl_body            : 9
declaration          : 4 21 22 33 42
declaration_list     : 22 23
declaration_list_opt : 6 7
declarator           : 6 7 12 13 26 121
direct_declarator    : 8 27 28 29 30 31
empty                : 11 24 28 31 44 47 102
expression           : 38 39 40 43 45 46 90 100 101 115
expression_opt       : 41 41 41 42 42 50
expression_statement : 51
function_definition  : 5
global_declaration   : 2 3
global_declaration_list : 1 3
identifier           : 25 113 117 118
identifier_list      : 30 118
init_declarator      : 14 15
init_declarator_list : 10 15
initializer          : 13 19 20
initializer_list     : 17 18 20
iteration_statement  : 54
jump_statement       : 55
parameter_declaration : 119 120
parameter_list       : 29 120
postfix_expression   : 80 90 91 92 93 94
primary_expression   : 89
print_statement      : 57
program              : 0
read_statement       : 58
selection_statement  : 52
statement            : 34 38 39 39 40 41 42
type_specifier       : 6 10 11 79 121
unary_expression     : 78 81 82 106
unary_operator       : 83

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . global_declaration_list
    (2) global_declaration_list -> . global_declaration
    (3) global_declaration_list -> . global_declaration_list global_declaration
    (4) global_declaration -> . declaration
    (5) global_declaration -> . function_definition
    (9) declaration -> . decl_body SEMI
    (6) function_definition -> . type_specifier declarator declaration_list_opt compound_statement
    (7) function_definition -> . declarator declaration_list_opt compound_statement
    (10) decl_body -> . type_specifier init_declarator_list
    (11) decl_body -> . type_specifier empty
    (60) type_specifier -> . VOID
    (61) type_specifier -> . CHAR
    (62) type_specifier -> . INT
    (63) type_specifier -> . FLOAT
    (8) declarator -> . direct_declarator
    (25) direct_declarator -> . identifier
    (26) direct_declarator -> . LPAREN declarator RPAREN
    (27) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (28) direct_declarator -> . direct_declarator LBRACKET empty RBRACKET
    (29) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (30) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (31) direct_declarator -> . direct_declarator LPAREN empty RPAREN
    (116) identifier -> . ID

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    LPAREN          shift and go to state 15
    ID              shift and go to state 16

    program                        shift and go to state 1
    global_declaration_list        shift and go to state 2
    global_declaration             shift and go to state 3
    declaration                    shift and go to state 4
    function_definition            shift and go to state 5
    decl_body                      shift and go to state 6
    type_specifier                 shift and go to state 7
    declarator                     shift and go to state 8
    direct_declarator              shift and go to state 13
    identifier                     shift and go to state 14

state 1

    (0) S' -> program .



state 2

    (1) program -> global_declaration_list .
    (3) global_declaration_list -> global_declaration_list . global_declaration
    (4) global_declaration -> . declaration
    (5) global_declaration -> . function_definition
    (9) declaration -> . decl_body SEMI
    (6) function_definition -> . type_specifier declarator declaration_list_opt compound_statement
    (7) function_definition -> . declarator declaration_list_opt compound_statement
    (10) decl_body -> . type_specifier init_declarator_list
    (11) decl_body -> . type_specifier empty
    (60) type_specifier -> . VOID
    (61) type_specifier -> . CHAR
    (62) type_specifier -> . INT
    (63) type_specifier -> . FLOAT
    (8) declarator -> . direct_declarator
    (25) direct_declarator -> . identifier
    (26) direct_declarator -> . LPAREN declarator RPAREN
    (27) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (28) direct_declarator -> . direct_declarator LBRACKET empty RBRACKET
    (29) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (30) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (31) direct_declarator -> . direct_declarator LPAREN empty RPAREN
    (116) identifier -> . ID

    $end            reduce using rule 1 (program -> global_declaration_list .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    LPAREN          shift and go to state 15
    ID              shift and go to state 16

    global_declaration             shift and go to state 17
    declaration                    shift and go to state 4
    function_definition            shift and go to state 5
    decl_body                      shift and go to state 6
    type_specifier                 shift and go to state 7
    declarator                     shift and go to state 8
    direct_declarator              shift and go to state 13
    identifier                     shift and go to state 14

state 3

    (2) global_declaration_list -> global_declaration .

    VOID            reduce using rule 2 (global_declaration_list -> global_declaration .)
    CHAR            reduce using rule 2 (global_declaration_list -> global_declaration .)
    INT             reduce using rule 2 (global_declaration_list -> global_declaration .)
    FLOAT           reduce using rule 2 (global_declaration_list -> global_declaration .)
    LPAREN          reduce using rule 2 (global_declaration_list -> global_declaration .)
    ID              reduce using rule 2 (global_declaration_list -> global_declaration .)
    $end            reduce using rule 2 (global_declaration_list -> global_declaration .)


state 4

    (4) global_declaration -> declaration .

    VOID            reduce using rule 4 (global_declaration -> declaration .)
    CHAR            reduce using rule 4 (global_declaration -> declaration .)
    INT             reduce using rule 4 (global_declaration -> declaration .)
    FLOAT           reduce using rule 4 (global_declaration -> declaration .)
    LPAREN          reduce using rule 4 (global_declaration -> declaration .)
    ID              reduce using rule 4 (global_declaration -> declaration .)
    $end            reduce using rule 4 (global_declaration -> declaration .)


state 5

    (5) global_declaration -> function_definition .

    VOID            reduce using rule 5 (global_declaration -> function_definition .)
    CHAR            reduce using rule 5 (global_declaration -> function_definition .)
    INT             reduce using rule 5 (global_declaration -> function_definition .)
    FLOAT           reduce using rule 5 (global_declaration -> function_definition .)
    LPAREN          reduce using rule 5 (global_declaration -> function_definition .)
    ID              reduce using rule 5 (global_declaration -> function_definition .)
    $end            reduce using rule 5 (global_declaration -> function_definition .)


state 6

    (9) declaration -> decl_body . SEMI

    SEMI            shift and go to state 18


state 7

    (6) function_definition -> type_specifier . declarator declaration_list_opt compound_statement
    (10) decl_body -> type_specifier . init_declarator_list
    (11) decl_body -> type_specifier . empty
    (8) declarator -> . direct_declarator
    (14) init_declarator_list -> . init_declarator
    (15) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (59) empty -> .
    (25) direct_declarator -> . identifier
    (26) direct_declarator -> . LPAREN declarator RPAREN
    (27) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (28) direct_declarator -> . direct_declarator LBRACKET empty RBRACKET
    (29) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (30) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (31) direct_declarator -> . direct_declarator LPAREN empty RPAREN
    (12) init_declarator -> . declarator
    (13) init_declarator -> . declarator ASSIGN initializer
    (116) identifier -> . ID

    SEMI            reduce using rule 59 (empty -> .)
    LPAREN          shift and go to state 15
    ID              shift and go to state 16

    declarator                     shift and go to state 19
    init_declarator_list           shift and go to state 20
    empty                          shift and go to state 21
    direct_declarator              shift and go to state 13
    init_declarator                shift and go to state 22
    identifier                     shift and go to state 14

state 8

    (7) function_definition -> declarator . declaration_list_opt compound_statement
    (23) declaration_list_opt -> . declaration_list
    (24) declaration_list_opt -> . empty
    (21) declaration_list -> . declaration
    (22) declaration_list -> . declaration_list declaration
    (59) empty -> .
    (9) declaration -> . decl_body SEMI
    (10) decl_body -> . type_specifier init_declarator_list
    (11) decl_body -> . type_specifier empty
    (60) type_specifier -> . VOID
    (61) type_specifier -> . CHAR
    (62) type_specifier -> . INT
    (63) type_specifier -> . FLOAT

    LBRACE          reduce using rule 59 (empty -> .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    declaration_list_opt           shift and go to state 23
    declaration_list               shift and go to state 24
    empty                          shift and go to state 25
    declaration                    shift and go to state 26
    decl_body                      shift and go to state 6
    type_specifier                 shift and go to state 27

state 9

    (60) type_specifier -> VOID .

    LPAREN          reduce using rule 60 (type_specifier -> VOID .)
    ID              reduce using rule 60 (type_specifier -> VOID .)
    SEMI            reduce using rule 60 (type_specifier -> VOID .)
    RPAREN          reduce using rule 60 (type_specifier -> VOID .)


state 10

    (61) type_specifier -> CHAR .

    LPAREN          reduce using rule 61 (type_specifier -> CHAR .)
    ID              reduce using rule 61 (type_specifier -> CHAR .)
    SEMI            reduce using rule 61 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 61 (type_specifier -> CHAR .)


state 11

    (62) type_specifier -> INT .

    LPAREN          reduce using rule 62 (type_specifier -> INT .)
    ID              reduce using rule 62 (type_specifier -> INT .)
    SEMI            reduce using rule 62 (type_specifier -> INT .)
    RPAREN          reduce using rule 62 (type_specifier -> INT .)


state 12

    (63) type_specifier -> FLOAT .

    LPAREN          reduce using rule 63 (type_specifier -> FLOAT .)
    ID              reduce using rule 63 (type_specifier -> FLOAT .)
    SEMI            reduce using rule 63 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 63 (type_specifier -> FLOAT .)


state 13

    (8) declarator -> direct_declarator .
    (27) direct_declarator -> direct_declarator . LBRACKET constant_expression RBRACKET
    (28) direct_declarator -> direct_declarator . LBRACKET empty RBRACKET
    (29) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN
    (30) direct_declarator -> direct_declarator . LPAREN identifier_list RPAREN
    (31) direct_declarator -> direct_declarator . LPAREN empty RPAREN

    VOID            reduce using rule 8 (declarator -> direct_declarator .)
    CHAR            reduce using rule 8 (declarator -> direct_declarator .)
    INT             reduce using rule 8 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 8 (declarator -> direct_declarator .)
    LBRACE          reduce using rule 8 (declarator -> direct_declarator .)
    ASSIGN          reduce using rule 8 (declarator -> direct_declarator .)
    COMMA           reduce using rule 8 (declarator -> direct_declarator .)
    SEMI            reduce using rule 8 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 8 (declarator -> direct_declarator .)
    LBRACKET        shift and go to state 28
    LPAREN          shift and go to state 29


state 14

    (25) direct_declarator -> identifier .

    LBRACKET        reduce using rule 25 (direct_declarator -> identifier .)
    LPAREN          reduce using rule 25 (direct_declarator -> identifier .)
    VOID            reduce using rule 25 (direct_declarator -> identifier .)
    CHAR            reduce using rule 25 (direct_declarator -> identifier .)
    INT             reduce using rule 25 (direct_declarator -> identifier .)
    FLOAT           reduce using rule 25 (direct_declarator -> identifier .)
    LBRACE          reduce using rule 25 (direct_declarator -> identifier .)
    ASSIGN          reduce using rule 25 (direct_declarator -> identifier .)
    COMMA           reduce using rule 25 (direct_declarator -> identifier .)
    SEMI            reduce using rule 25 (direct_declarator -> identifier .)
    RPAREN          reduce using rule 25 (direct_declarator -> identifier .)


state 15

    (26) direct_declarator -> LPAREN . declarator RPAREN
    (8) declarator -> . direct_declarator
    (25) direct_declarator -> . identifier
    (26) direct_declarator -> . LPAREN declarator RPAREN
    (27) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (28) direct_declarator -> . direct_declarator LBRACKET empty RBRACKET
    (29) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (30) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (31) direct_declarator -> . direct_declarator LPAREN empty RPAREN
    (116) identifier -> . ID

    LPAREN          shift and go to state 15
    ID              shift and go to state 16

    declarator                     shift and go to state 30
    direct_declarator              shift and go to state 13
    identifier                     shift and go to state 14

state 16

    (116) identifier -> ID .

    LBRACKET        reduce using rule 116 (identifier -> ID .)
    LPAREN          reduce using rule 116 (identifier -> ID .)
    VOID            reduce using rule 116 (identifier -> ID .)
    CHAR            reduce using rule 116 (identifier -> ID .)
    INT             reduce using rule 116 (identifier -> ID .)
    FLOAT           reduce using rule 116 (identifier -> ID .)
    LBRACE          reduce using rule 116 (identifier -> ID .)
    ASSIGN          reduce using rule 116 (identifier -> ID .)
    COMMA           reduce using rule 116 (identifier -> ID .)
    SEMI            reduce using rule 116 (identifier -> ID .)
    RPAREN          reduce using rule 116 (identifier -> ID .)
    PLUSPLUS        reduce using rule 116 (identifier -> ID .)
    MINUSMINUS      reduce using rule 116 (identifier -> ID .)
    TIMES           reduce using rule 116 (identifier -> ID .)
    DIVIDE          reduce using rule 116 (identifier -> ID .)
    MOD             reduce using rule 116 (identifier -> ID .)
    PLUS            reduce using rule 116 (identifier -> ID .)
    MINUS           reduce using rule 116 (identifier -> ID .)
    LT              reduce using rule 116 (identifier -> ID .)
    LTE             reduce using rule 116 (identifier -> ID .)
    GT              reduce using rule 116 (identifier -> ID .)
    GTE             reduce using rule 116 (identifier -> ID .)
    EQUALS          reduce using rule 116 (identifier -> ID .)
    NE              reduce using rule 116 (identifier -> ID .)
    AND             reduce using rule 116 (identifier -> ID .)
    OR              reduce using rule 116 (identifier -> ID .)
    RBRACKET        reduce using rule 116 (identifier -> ID .)
    TIMESASSIGN     reduce using rule 116 (identifier -> ID .)
    DIVIDEASSIGN    reduce using rule 116 (identifier -> ID .)
    MODASSIGN       reduce using rule 116 (identifier -> ID .)
    PLUSASSIGN      reduce using rule 116 (identifier -> ID .)
    MINUSASSIGN     reduce using rule 116 (identifier -> ID .)
    RBRACE          reduce using rule 116 (identifier -> ID .)


state 17

    (3) global_declaration_list -> global_declaration_list global_declaration .

    VOID            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    CHAR            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    INT             reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    FLOAT           reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    LPAREN          reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    ID              reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    $end            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)


state 18

    (9) declaration -> decl_body SEMI .

    VOID            reduce using rule 9 (declaration -> decl_body SEMI .)
    CHAR            reduce using rule 9 (declaration -> decl_body SEMI .)
    INT             reduce using rule 9 (declaration -> decl_body SEMI .)
    FLOAT           reduce using rule 9 (declaration -> decl_body SEMI .)
    LPAREN          reduce using rule 9 (declaration -> decl_body SEMI .)
    ID              reduce using rule 9 (declaration -> decl_body SEMI .)
    $end            reduce using rule 9 (declaration -> decl_body SEMI .)
    LBRACE          reduce using rule 9 (declaration -> decl_body SEMI .)
    RBRACE          reduce using rule 9 (declaration -> decl_body SEMI .)
    IF              reduce using rule 9 (declaration -> decl_body SEMI .)
    WHILE           reduce using rule 9 (declaration -> decl_body SEMI .)
    FOR             reduce using rule 9 (declaration -> decl_body SEMI .)
    BREAK           reduce using rule 9 (declaration -> decl_body SEMI .)
    RETURN          reduce using rule 9 (declaration -> decl_body SEMI .)
    ASSERT          reduce using rule 9 (declaration -> decl_body SEMI .)
    PRINT           reduce using rule 9 (declaration -> decl_body SEMI .)
    READ            reduce using rule 9 (declaration -> decl_body SEMI .)
    PLUSPLUS        reduce using rule 9 (declaration -> decl_body SEMI .)
    MINUSMINUS      reduce using rule 9 (declaration -> decl_body SEMI .)
    ADDRESS         reduce using rule 9 (declaration -> decl_body SEMI .)
    TIMES           reduce using rule 9 (declaration -> decl_body SEMI .)
    PLUS            reduce using rule 9 (declaration -> decl_body SEMI .)
    MINUS           reduce using rule 9 (declaration -> decl_body SEMI .)
    NOT             reduce using rule 9 (declaration -> decl_body SEMI .)
    INT_CONST       reduce using rule 9 (declaration -> decl_body SEMI .)
    FLOAT_CONST     reduce using rule 9 (declaration -> decl_body SEMI .)
    CHAR_CONST      reduce using rule 9 (declaration -> decl_body SEMI .)
    STRING_CONST    reduce using rule 9 (declaration -> decl_body SEMI .)
    SEMI            reduce using rule 9 (declaration -> decl_body SEMI .)


state 19

    (6) function_definition -> type_specifier declarator . declaration_list_opt compound_statement
    (12) init_declarator -> declarator .
    (13) init_declarator -> declarator . ASSIGN initializer
    (23) declaration_list_opt -> . declaration_list
    (24) declaration_list_opt -> . empty
    (21) declaration_list -> . declaration
    (22) declaration_list -> . declaration_list declaration
    (59) empty -> .
    (9) declaration -> . decl_body SEMI
    (10) decl_body -> . type_specifier init_declarator_list
    (11) decl_body -> . type_specifier empty
    (60) type_specifier -> . VOID
    (61) type_specifier -> . CHAR
    (62) type_specifier -> . INT
    (63) type_specifier -> . FLOAT

    COMMA           reduce using rule 12 (init_declarator -> declarator .)
    SEMI            reduce using rule 12 (init_declarator -> declarator .)
    ASSIGN          shift and go to state 32
    LBRACE          reduce using rule 59 (empty -> .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    type_specifier                 shift and go to state 27
    declaration_list_opt           shift and go to state 31
    declaration_list               shift and go to state 24
    empty                          shift and go to state 25
    declaration                    shift and go to state 26
    decl_body                      shift and go to state 6

state 20

    (10) decl_body -> type_specifier init_declarator_list .
    (15) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            reduce using rule 10 (decl_body -> type_specifier init_declarator_list .)
    COMMA           shift and go to state 33


state 21

    (11) decl_body -> type_specifier empty .

    SEMI            reduce using rule 11 (decl_body -> type_specifier empty .)


state 22

    (14) init_declarator_list -> init_declarator .

    COMMA           reduce using rule 14 (init_declarator_list -> init_declarator .)
    SEMI            reduce using rule 14 (init_declarator_list -> init_declarator .)


state 23

    (7) function_definition -> declarator declaration_list_opt . compound_statement
    (37) compound_statement -> . LBRACE block_item_list RBRACE

    LBRACE          shift and go to state 35

    compound_statement             shift and go to state 34

state 24

    (23) declaration_list_opt -> declaration_list .
    (22) declaration_list -> declaration_list . declaration
    (9) declaration -> . decl_body SEMI
    (10) decl_body -> . type_specifier init_declarator_list
    (11) decl_body -> . type_specifier empty
    (60) type_specifier -> . VOID
    (61) type_specifier -> . CHAR
    (62) type_specifier -> . INT
    (63) type_specifier -> . FLOAT

    LBRACE          reduce using rule 23 (declaration_list_opt -> declaration_list .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    declaration                    shift and go to state 36
    decl_body                      shift and go to state 6
    type_specifier                 shift and go to state 27

state 25

    (24) declaration_list_opt -> empty .

    LBRACE          reduce using rule 24 (declaration_list_opt -> empty .)


state 26

    (21) declaration_list -> declaration .

    VOID            reduce using rule 21 (declaration_list -> declaration .)
    CHAR            reduce using rule 21 (declaration_list -> declaration .)
    INT             reduce using rule 21 (declaration_list -> declaration .)
    FLOAT           reduce using rule 21 (declaration_list -> declaration .)
    LBRACE          reduce using rule 21 (declaration_list -> declaration .)


state 27

    (10) decl_body -> type_specifier . init_declarator_list
    (11) decl_body -> type_specifier . empty
    (14) init_declarator_list -> . init_declarator
    (15) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (59) empty -> .
    (12) init_declarator -> . declarator
    (13) init_declarator -> . declarator ASSIGN initializer
    (8) declarator -> . direct_declarator
    (25) direct_declarator -> . identifier
    (26) direct_declarator -> . LPAREN declarator RPAREN
    (27) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (28) direct_declarator -> . direct_declarator LBRACKET empty RBRACKET
    (29) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (30) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (31) direct_declarator -> . direct_declarator LPAREN empty RPAREN
    (116) identifier -> . ID

    SEMI            reduce using rule 59 (empty -> .)
    LPAREN          shift and go to state 15
    ID              shift and go to state 16

    init_declarator_list           shift and go to state 20
    empty                          shift and go to state 21
    init_declarator                shift and go to state 22
    declarator                     shift and go to state 37
    direct_declarator              shift and go to state 13
    identifier                     shift and go to state 14

state 28

    (27) direct_declarator -> direct_declarator LBRACKET . constant_expression RBRACKET
    (28) direct_declarator -> direct_declarator LBRACKET . empty RBRACKET
    (32) constant_expression -> . binary_expression
    (59) empty -> .
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    RBRACKET        reduce using rule 59 (empty -> .)
    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    constant_expression            shift and go to state 38
    empty                          shift and go to state 39
    binary_expression              shift and go to state 40
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 29

    (29) direct_declarator -> direct_declarator LPAREN . parameter_list RPAREN
    (30) direct_declarator -> direct_declarator LPAREN . identifier_list RPAREN
    (31) direct_declarator -> direct_declarator LPAREN . empty RPAREN
    (119) parameter_list -> . parameter_declaration
    (120) parameter_list -> . parameter_list COMMA parameter_declaration
    (117) identifier_list -> . identifier
    (118) identifier_list -> . identifier_list COMMA identifier
    (59) empty -> .
    (121) parameter_declaration -> . type_specifier declarator
    (116) identifier -> . ID
    (60) type_specifier -> . VOID
    (61) type_specifier -> . CHAR
    (62) type_specifier -> . INT
    (63) type_specifier -> . FLOAT

    RPAREN          reduce using rule 59 (empty -> .)
    ID              shift and go to state 16
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    parameter_list                 shift and go to state 60
    identifier_list                shift and go to state 61
    empty                          shift and go to state 62
    parameter_declaration          shift and go to state 63
    identifier                     shift and go to state 64
    type_specifier                 shift and go to state 65

state 30

    (26) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 66


state 31

    (6) function_definition -> type_specifier declarator declaration_list_opt . compound_statement
    (37) compound_statement -> . LBRACE block_item_list RBRACE

    LBRACE          shift and go to state 35

    compound_statement             shift and go to state 67

state 32

    (13) init_declarator -> declarator ASSIGN . initializer
    (16) initializer -> . assignment_expression
    (17) initializer -> . LBRACE initializer_list RBRACE
    (18) initializer -> . LBRACE initializer_list COMMA RBRACE
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    LBRACE          shift and go to state 70
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    initializer                    shift and go to state 68
    assignment_expression          shift and go to state 69
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 33

    (15) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (12) init_declarator -> . declarator
    (13) init_declarator -> . declarator ASSIGN initializer
    (8) declarator -> . direct_declarator
    (25) direct_declarator -> . identifier
    (26) direct_declarator -> . LPAREN declarator RPAREN
    (27) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (28) direct_declarator -> . direct_declarator LBRACKET empty RBRACKET
    (29) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (30) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (31) direct_declarator -> . direct_declarator LPAREN empty RPAREN
    (116) identifier -> . ID

    LPAREN          shift and go to state 15
    ID              shift and go to state 16

    init_declarator                shift and go to state 73
    declarator                     shift and go to state 37
    direct_declarator              shift and go to state 13
    identifier                     shift and go to state 14

state 34

    (7) function_definition -> declarator declaration_list_opt compound_statement .

    VOID            reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 7 (function_definition -> declarator declaration_list_opt compound_statement .)


state 35

    (37) compound_statement -> LBRACE . block_item_list RBRACE
    (35) block_item_list -> . block_item
    (36) block_item_list -> . block_item_list block_item
    (33) block_item -> . declaration
    (34) block_item -> . statement
    (9) declaration -> . decl_body SEMI
    (51) statement -> . expression_statement
    (52) statement -> . selection_statement
    (53) statement -> . compound_statement
    (54) statement -> . iteration_statement
    (55) statement -> . jump_statement
    (56) statement -> . assert_statement
    (57) statement -> . print_statement
    (58) statement -> . read_statement
    (10) decl_body -> . type_specifier init_declarator_list
    (11) decl_body -> . type_specifier empty
    (43) expression_statement -> . expression SEMI
    (44) expression_statement -> . empty SEMI
    (38) selection_statement -> . IF LPAREN expression RPAREN statement
    (39) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (37) compound_statement -> . LBRACE block_item_list RBRACE
    (40) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (41) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (42) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (49) jump_statement -> . BREAK SEMI
    (50) jump_statement -> . RETURN expression_opt SEMI
    (45) assert_statement -> . ASSERT expression SEMI
    (46) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (47) print_statement -> . PRINT LPAREN empty RPAREN SEMI
    (48) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (60) type_specifier -> . VOID
    (61) type_specifier -> . CHAR
    (62) type_specifier -> . INT
    (63) type_specifier -> . FLOAT
    (99) expression -> . assignment_expression
    (100) expression -> . expression COMMA assignment_expression
    (59) empty -> .
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    IF              shift and go to state 88
    LBRACE          shift and go to state 35
    WHILE           shift and go to state 89
    FOR             shift and go to state 90
    BREAK           shift and go to state 91
    RETURN          shift and go to state 92
    ASSERT          shift and go to state 93
    PRINT           shift and go to state 94
    READ            shift and go to state 95
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    SEMI            reduce using rule 59 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    block_item_list                shift and go to state 74
    block_item                     shift and go to state 75
    declaration                    shift and go to state 76
    statement                      shift and go to state 77
    decl_body                      shift and go to state 6
    expression_statement           shift and go to state 78
    selection_statement            shift and go to state 79
    compound_statement             shift and go to state 80
    iteration_statement            shift and go to state 81
    jump_statement                 shift and go to state 82
    assert_statement               shift and go to state 83
    print_statement                shift and go to state 84
    read_statement                 shift and go to state 85
    type_specifier                 shift and go to state 27
    empty                          shift and go to state 86
    expression                     shift and go to state 87
    assignment_expression          shift and go to state 96
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 36

    (22) declaration_list -> declaration_list declaration .

    VOID            reduce using rule 22 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 22 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 22 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 22 (declaration_list -> declaration_list declaration .)
    LBRACE          reduce using rule 22 (declaration_list -> declaration_list declaration .)


state 37

    (12) init_declarator -> declarator .
    (13) init_declarator -> declarator . ASSIGN initializer

    COMMA           reduce using rule 12 (init_declarator -> declarator .)
    SEMI            reduce using rule 12 (init_declarator -> declarator .)
    ASSIGN          shift and go to state 32


state 38

    (27) direct_declarator -> direct_declarator LBRACKET constant_expression . RBRACKET

    RBRACKET        shift and go to state 97


state 39

    (28) direct_declarator -> direct_declarator LBRACKET empty . RBRACKET

    RBRACKET        shift and go to state 98


state 40

    (32) constant_expression -> binary_expression .
    (65) binary_expression -> binary_expression . TIMES binary_expression
    (66) binary_expression -> binary_expression . DIVIDE binary_expression
    (67) binary_expression -> binary_expression . MOD binary_expression
    (68) binary_expression -> binary_expression . PLUS binary_expression
    (69) binary_expression -> binary_expression . MINUS binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LTE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GTE binary_expression
    (74) binary_expression -> binary_expression . EQUALS binary_expression
    (75) binary_expression -> binary_expression . NE binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        reduce using rule 32 (constant_expression -> binary_expression .)
    TIMES           shift and go to state 99
    DIVIDE          shift and go to state 100
    MOD             shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    LT              shift and go to state 104
    LTE             shift and go to state 105
    GT              shift and go to state 106
    GTE             shift and go to state 107
    EQUALS          shift and go to state 108
    NE              shift and go to state 109
    AND             shift and go to state 110
    OR              shift and go to state 111


state 41

    (64) binary_expression -> cast_expression .

    TIMES           reduce using rule 64 (binary_expression -> cast_expression .)
    DIVIDE          reduce using rule 64 (binary_expression -> cast_expression .)
    MOD             reduce using rule 64 (binary_expression -> cast_expression .)
    PLUS            reduce using rule 64 (binary_expression -> cast_expression .)
    MINUS           reduce using rule 64 (binary_expression -> cast_expression .)
    LT              reduce using rule 64 (binary_expression -> cast_expression .)
    LTE             reduce using rule 64 (binary_expression -> cast_expression .)
    GT              reduce using rule 64 (binary_expression -> cast_expression .)
    GTE             reduce using rule 64 (binary_expression -> cast_expression .)
    EQUALS          reduce using rule 64 (binary_expression -> cast_expression .)
    NE              reduce using rule 64 (binary_expression -> cast_expression .)
    AND             reduce using rule 64 (binary_expression -> cast_expression .)
    OR              reduce using rule 64 (binary_expression -> cast_expression .)
    RBRACKET        reduce using rule 64 (binary_expression -> cast_expression .)
    COMMA           reduce using rule 64 (binary_expression -> cast_expression .)
    SEMI            reduce using rule 64 (binary_expression -> cast_expression .)
    RPAREN          reduce using rule 64 (binary_expression -> cast_expression .)
    RBRACE          reduce using rule 64 (binary_expression -> cast_expression .)


state 42

    (85) unary_operator -> TIMES .

    LPAREN          reduce using rule 85 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 85 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 85 (unary_operator -> TIMES .)
    ADDRESS         reduce using rule 85 (unary_operator -> TIMES .)
    TIMES           reduce using rule 85 (unary_operator -> TIMES .)
    PLUS            reduce using rule 85 (unary_operator -> TIMES .)
    MINUS           reduce using rule 85 (unary_operator -> TIMES .)
    NOT             reduce using rule 85 (unary_operator -> TIMES .)
    ID              reduce using rule 85 (unary_operator -> TIMES .)
    INT_CONST       reduce using rule 85 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 85 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 85 (unary_operator -> TIMES .)
    STRING_CONST    reduce using rule 85 (unary_operator -> TIMES .)


state 43

    (86) unary_operator -> PLUS .

    LPAREN          reduce using rule 86 (unary_operator -> PLUS .)
    PLUSPLUS        reduce using rule 86 (unary_operator -> PLUS .)
    MINUSMINUS      reduce using rule 86 (unary_operator -> PLUS .)
    ADDRESS         reduce using rule 86 (unary_operator -> PLUS .)
    TIMES           reduce using rule 86 (unary_operator -> PLUS .)
    PLUS            reduce using rule 86 (unary_operator -> PLUS .)
    MINUS           reduce using rule 86 (unary_operator -> PLUS .)
    NOT             reduce using rule 86 (unary_operator -> PLUS .)
    ID              reduce using rule 86 (unary_operator -> PLUS .)
    INT_CONST       reduce using rule 86 (unary_operator -> PLUS .)
    FLOAT_CONST     reduce using rule 86 (unary_operator -> PLUS .)
    CHAR_CONST      reduce using rule 86 (unary_operator -> PLUS .)
    STRING_CONST    reduce using rule 86 (unary_operator -> PLUS .)


state 44

    (87) unary_operator -> MINUS .

    LPAREN          reduce using rule 87 (unary_operator -> MINUS .)
    PLUSPLUS        reduce using rule 87 (unary_operator -> MINUS .)
    MINUSMINUS      reduce using rule 87 (unary_operator -> MINUS .)
    ADDRESS         reduce using rule 87 (unary_operator -> MINUS .)
    TIMES           reduce using rule 87 (unary_operator -> MINUS .)
    PLUS            reduce using rule 87 (unary_operator -> MINUS .)
    MINUS           reduce using rule 87 (unary_operator -> MINUS .)
    NOT             reduce using rule 87 (unary_operator -> MINUS .)
    ID              reduce using rule 87 (unary_operator -> MINUS .)
    INT_CONST       reduce using rule 87 (unary_operator -> MINUS .)
    FLOAT_CONST     reduce using rule 87 (unary_operator -> MINUS .)
    CHAR_CONST      reduce using rule 87 (unary_operator -> MINUS .)
    STRING_CONST    reduce using rule 87 (unary_operator -> MINUS .)


state 45

    (78) cast_expression -> unary_expression .

    TIMES           reduce using rule 78 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 78 (cast_expression -> unary_expression .)
    MOD             reduce using rule 78 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 78 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 78 (cast_expression -> unary_expression .)
    LT              reduce using rule 78 (cast_expression -> unary_expression .)
    LTE             reduce using rule 78 (cast_expression -> unary_expression .)
    GT              reduce using rule 78 (cast_expression -> unary_expression .)
    GTE             reduce using rule 78 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 78 (cast_expression -> unary_expression .)
    NE              reduce using rule 78 (cast_expression -> unary_expression .)
    AND             reduce using rule 78 (cast_expression -> unary_expression .)
    OR              reduce using rule 78 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 78 (cast_expression -> unary_expression .)
    ASSIGN          reduce using rule 78 (cast_expression -> unary_expression .)
    TIMESASSIGN     reduce using rule 78 (cast_expression -> unary_expression .)
    DIVIDEASSIGN    reduce using rule 78 (cast_expression -> unary_expression .)
    MODASSIGN       reduce using rule 78 (cast_expression -> unary_expression .)
    PLUSASSIGN      reduce using rule 78 (cast_expression -> unary_expression .)
    MINUSASSIGN     reduce using rule 78 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 78 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 78 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 78 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 78 (cast_expression -> unary_expression .)


state 46

    (79) cast_expression -> LPAREN . type_specifier RPAREN cast_expression
    (115) primary_expression -> LPAREN . expression RPAREN
    (60) type_specifier -> . VOID
    (61) type_specifier -> . CHAR
    (62) type_specifier -> . INT
    (63) type_specifier -> . FLOAT
    (99) expression -> . assignment_expression
    (100) expression -> . expression COMMA assignment_expression
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    type_specifier                 shift and go to state 112
    cast_expression                shift and go to state 41
    expression                     shift and go to state 113
    assignment_expression          shift and go to state 96
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 47

    (80) unary_expression -> postfix_expression .
    (90) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (91) postfix_expression -> postfix_expression . LPAREN argument_expression RPAREN
    (92) postfix_expression -> postfix_expression . LPAREN RPAREN
    (93) postfix_expression -> postfix_expression . PLUSPLUS
    (94) postfix_expression -> postfix_expression . MINUSMINUS

    TIMES           reduce using rule 80 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 80 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 80 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 80 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 80 (unary_expression -> postfix_expression .)
    LT              reduce using rule 80 (unary_expression -> postfix_expression .)
    LTE             reduce using rule 80 (unary_expression -> postfix_expression .)
    GT              reduce using rule 80 (unary_expression -> postfix_expression .)
    GTE             reduce using rule 80 (unary_expression -> postfix_expression .)
    EQUALS          reduce using rule 80 (unary_expression -> postfix_expression .)
    NE              reduce using rule 80 (unary_expression -> postfix_expression .)
    AND             reduce using rule 80 (unary_expression -> postfix_expression .)
    OR              reduce using rule 80 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 80 (unary_expression -> postfix_expression .)
    ASSIGN          reduce using rule 80 (unary_expression -> postfix_expression .)
    TIMESASSIGN     reduce using rule 80 (unary_expression -> postfix_expression .)
    DIVIDEASSIGN    reduce using rule 80 (unary_expression -> postfix_expression .)
    MODASSIGN       reduce using rule 80 (unary_expression -> postfix_expression .)
    PLUSASSIGN      reduce using rule 80 (unary_expression -> postfix_expression .)
    MINUSASSIGN     reduce using rule 80 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 80 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 80 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 80 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 80 (unary_expression -> postfix_expression .)
    LBRACKET        shift and go to state 114
    LPAREN          shift and go to state 115
    PLUSPLUS        shift and go to state 116
    MINUSMINUS      shift and go to state 117


state 48

    (81) unary_expression -> PLUSPLUS . unary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    LPAREN          shift and go to state 119
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    unary_expression               shift and go to state 118
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 49

    (82) unary_expression -> MINUSMINUS . unary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    LPAREN          shift and go to state 119
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    unary_expression               shift and go to state 120
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 50

    (83) unary_expression -> unary_operator . cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    unary_operator                 shift and go to state 50
    cast_expression                shift and go to state 121
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 51

    (89) postfix_expression -> primary_expression .

    LBRACKET        reduce using rule 89 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 89 (postfix_expression -> primary_expression .)
    PLUSPLUS        reduce using rule 89 (postfix_expression -> primary_expression .)
    MINUSMINUS      reduce using rule 89 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 89 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 89 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 89 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 89 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 89 (postfix_expression -> primary_expression .)
    LT              reduce using rule 89 (postfix_expression -> primary_expression .)
    LTE             reduce using rule 89 (postfix_expression -> primary_expression .)
    GT              reduce using rule 89 (postfix_expression -> primary_expression .)
    GTE             reduce using rule 89 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 89 (postfix_expression -> primary_expression .)
    NE              reduce using rule 89 (postfix_expression -> primary_expression .)
    AND             reduce using rule 89 (postfix_expression -> primary_expression .)
    OR              reduce using rule 89 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 89 (postfix_expression -> primary_expression .)
    ASSIGN          reduce using rule 89 (postfix_expression -> primary_expression .)
    TIMESASSIGN     reduce using rule 89 (postfix_expression -> primary_expression .)
    DIVIDEASSIGN    reduce using rule 89 (postfix_expression -> primary_expression .)
    MODASSIGN       reduce using rule 89 (postfix_expression -> primary_expression .)
    PLUSASSIGN      reduce using rule 89 (postfix_expression -> primary_expression .)
    MINUSASSIGN     reduce using rule 89 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 89 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 89 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 89 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 89 (postfix_expression -> primary_expression .)


state 52

    (84) unary_operator -> ADDRESS .

    LPAREN          reduce using rule 84 (unary_operator -> ADDRESS .)
    PLUSPLUS        reduce using rule 84 (unary_operator -> ADDRESS .)
    MINUSMINUS      reduce using rule 84 (unary_operator -> ADDRESS .)
    ADDRESS         reduce using rule 84 (unary_operator -> ADDRESS .)
    TIMES           reduce using rule 84 (unary_operator -> ADDRESS .)
    PLUS            reduce using rule 84 (unary_operator -> ADDRESS .)
    MINUS           reduce using rule 84 (unary_operator -> ADDRESS .)
    NOT             reduce using rule 84 (unary_operator -> ADDRESS .)
    ID              reduce using rule 84 (unary_operator -> ADDRESS .)
    INT_CONST       reduce using rule 84 (unary_operator -> ADDRESS .)
    FLOAT_CONST     reduce using rule 84 (unary_operator -> ADDRESS .)
    CHAR_CONST      reduce using rule 84 (unary_operator -> ADDRESS .)
    STRING_CONST    reduce using rule 84 (unary_operator -> ADDRESS .)


state 53

    (88) unary_operator -> NOT .

    LPAREN          reduce using rule 88 (unary_operator -> NOT .)
    PLUSPLUS        reduce using rule 88 (unary_operator -> NOT .)
    MINUSMINUS      reduce using rule 88 (unary_operator -> NOT .)
    ADDRESS         reduce using rule 88 (unary_operator -> NOT .)
    TIMES           reduce using rule 88 (unary_operator -> NOT .)
    PLUS            reduce using rule 88 (unary_operator -> NOT .)
    MINUS           reduce using rule 88 (unary_operator -> NOT .)
    NOT             reduce using rule 88 (unary_operator -> NOT .)
    ID              reduce using rule 88 (unary_operator -> NOT .)
    INT_CONST       reduce using rule 88 (unary_operator -> NOT .)
    FLOAT_CONST     reduce using rule 88 (unary_operator -> NOT .)
    CHAR_CONST      reduce using rule 88 (unary_operator -> NOT .)
    STRING_CONST    reduce using rule 88 (unary_operator -> NOT .)


state 54

    (113) primary_expression -> identifier .

    LBRACKET        reduce using rule 113 (primary_expression -> identifier .)
    LPAREN          reduce using rule 113 (primary_expression -> identifier .)
    PLUSPLUS        reduce using rule 113 (primary_expression -> identifier .)
    MINUSMINUS      reduce using rule 113 (primary_expression -> identifier .)
    TIMES           reduce using rule 113 (primary_expression -> identifier .)
    DIVIDE          reduce using rule 113 (primary_expression -> identifier .)
    MOD             reduce using rule 113 (primary_expression -> identifier .)
    PLUS            reduce using rule 113 (primary_expression -> identifier .)
    MINUS           reduce using rule 113 (primary_expression -> identifier .)
    LT              reduce using rule 113 (primary_expression -> identifier .)
    LTE             reduce using rule 113 (primary_expression -> identifier .)
    GT              reduce using rule 113 (primary_expression -> identifier .)
    GTE             reduce using rule 113 (primary_expression -> identifier .)
    EQUALS          reduce using rule 113 (primary_expression -> identifier .)
    NE              reduce using rule 113 (primary_expression -> identifier .)
    AND             reduce using rule 113 (primary_expression -> identifier .)
    OR              reduce using rule 113 (primary_expression -> identifier .)
    RBRACKET        reduce using rule 113 (primary_expression -> identifier .)
    ASSIGN          reduce using rule 113 (primary_expression -> identifier .)
    TIMESASSIGN     reduce using rule 113 (primary_expression -> identifier .)
    DIVIDEASSIGN    reduce using rule 113 (primary_expression -> identifier .)
    MODASSIGN       reduce using rule 113 (primary_expression -> identifier .)
    PLUSASSIGN      reduce using rule 113 (primary_expression -> identifier .)
    MINUSASSIGN     reduce using rule 113 (primary_expression -> identifier .)
    COMMA           reduce using rule 113 (primary_expression -> identifier .)
    SEMI            reduce using rule 113 (primary_expression -> identifier .)
    RPAREN          reduce using rule 113 (primary_expression -> identifier .)
    RBRACE          reduce using rule 113 (primary_expression -> identifier .)


state 55

    (114) primary_expression -> constant .

    LBRACKET        reduce using rule 114 (primary_expression -> constant .)
    LPAREN          reduce using rule 114 (primary_expression -> constant .)
    PLUSPLUS        reduce using rule 114 (primary_expression -> constant .)
    MINUSMINUS      reduce using rule 114 (primary_expression -> constant .)
    TIMES           reduce using rule 114 (primary_expression -> constant .)
    DIVIDE          reduce using rule 114 (primary_expression -> constant .)
    MOD             reduce using rule 114 (primary_expression -> constant .)
    PLUS            reduce using rule 114 (primary_expression -> constant .)
    MINUS           reduce using rule 114 (primary_expression -> constant .)
    LT              reduce using rule 114 (primary_expression -> constant .)
    LTE             reduce using rule 114 (primary_expression -> constant .)
    GT              reduce using rule 114 (primary_expression -> constant .)
    GTE             reduce using rule 114 (primary_expression -> constant .)
    EQUALS          reduce using rule 114 (primary_expression -> constant .)
    NE              reduce using rule 114 (primary_expression -> constant .)
    AND             reduce using rule 114 (primary_expression -> constant .)
    OR              reduce using rule 114 (primary_expression -> constant .)
    RBRACKET        reduce using rule 114 (primary_expression -> constant .)
    ASSIGN          reduce using rule 114 (primary_expression -> constant .)
    TIMESASSIGN     reduce using rule 114 (primary_expression -> constant .)
    DIVIDEASSIGN    reduce using rule 114 (primary_expression -> constant .)
    MODASSIGN       reduce using rule 114 (primary_expression -> constant .)
    PLUSASSIGN      reduce using rule 114 (primary_expression -> constant .)
    MINUSASSIGN     reduce using rule 114 (primary_expression -> constant .)
    COMMA           reduce using rule 114 (primary_expression -> constant .)
    SEMI            reduce using rule 114 (primary_expression -> constant .)
    RPAREN          reduce using rule 114 (primary_expression -> constant .)
    RBRACE          reduce using rule 114 (primary_expression -> constant .)


state 56

    (95) constant -> INT_CONST .

    LBRACKET        reduce using rule 95 (constant -> INT_CONST .)
    LPAREN          reduce using rule 95 (constant -> INT_CONST .)
    PLUSPLUS        reduce using rule 95 (constant -> INT_CONST .)
    MINUSMINUS      reduce using rule 95 (constant -> INT_CONST .)
    TIMES           reduce using rule 95 (constant -> INT_CONST .)
    DIVIDE          reduce using rule 95 (constant -> INT_CONST .)
    MOD             reduce using rule 95 (constant -> INT_CONST .)
    PLUS            reduce using rule 95 (constant -> INT_CONST .)
    MINUS           reduce using rule 95 (constant -> INT_CONST .)
    LT              reduce using rule 95 (constant -> INT_CONST .)
    LTE             reduce using rule 95 (constant -> INT_CONST .)
    GT              reduce using rule 95 (constant -> INT_CONST .)
    GTE             reduce using rule 95 (constant -> INT_CONST .)
    EQUALS          reduce using rule 95 (constant -> INT_CONST .)
    NE              reduce using rule 95 (constant -> INT_CONST .)
    AND             reduce using rule 95 (constant -> INT_CONST .)
    OR              reduce using rule 95 (constant -> INT_CONST .)
    RBRACKET        reduce using rule 95 (constant -> INT_CONST .)
    ASSIGN          reduce using rule 95 (constant -> INT_CONST .)
    TIMESASSIGN     reduce using rule 95 (constant -> INT_CONST .)
    DIVIDEASSIGN    reduce using rule 95 (constant -> INT_CONST .)
    MODASSIGN       reduce using rule 95 (constant -> INT_CONST .)
    PLUSASSIGN      reduce using rule 95 (constant -> INT_CONST .)
    MINUSASSIGN     reduce using rule 95 (constant -> INT_CONST .)
    COMMA           reduce using rule 95 (constant -> INT_CONST .)
    SEMI            reduce using rule 95 (constant -> INT_CONST .)
    RPAREN          reduce using rule 95 (constant -> INT_CONST .)
    RBRACE          reduce using rule 95 (constant -> INT_CONST .)


state 57

    (96) constant -> FLOAT_CONST .

    LBRACKET        reduce using rule 96 (constant -> FLOAT_CONST .)
    LPAREN          reduce using rule 96 (constant -> FLOAT_CONST .)
    PLUSPLUS        reduce using rule 96 (constant -> FLOAT_CONST .)
    MINUSMINUS      reduce using rule 96 (constant -> FLOAT_CONST .)
    TIMES           reduce using rule 96 (constant -> FLOAT_CONST .)
    DIVIDE          reduce using rule 96 (constant -> FLOAT_CONST .)
    MOD             reduce using rule 96 (constant -> FLOAT_CONST .)
    PLUS            reduce using rule 96 (constant -> FLOAT_CONST .)
    MINUS           reduce using rule 96 (constant -> FLOAT_CONST .)
    LT              reduce using rule 96 (constant -> FLOAT_CONST .)
    LTE             reduce using rule 96 (constant -> FLOAT_CONST .)
    GT              reduce using rule 96 (constant -> FLOAT_CONST .)
    GTE             reduce using rule 96 (constant -> FLOAT_CONST .)
    EQUALS          reduce using rule 96 (constant -> FLOAT_CONST .)
    NE              reduce using rule 96 (constant -> FLOAT_CONST .)
    AND             reduce using rule 96 (constant -> FLOAT_CONST .)
    OR              reduce using rule 96 (constant -> FLOAT_CONST .)
    RBRACKET        reduce using rule 96 (constant -> FLOAT_CONST .)
    ASSIGN          reduce using rule 96 (constant -> FLOAT_CONST .)
    TIMESASSIGN     reduce using rule 96 (constant -> FLOAT_CONST .)
    DIVIDEASSIGN    reduce using rule 96 (constant -> FLOAT_CONST .)
    MODASSIGN       reduce using rule 96 (constant -> FLOAT_CONST .)
    PLUSASSIGN      reduce using rule 96 (constant -> FLOAT_CONST .)
    MINUSASSIGN     reduce using rule 96 (constant -> FLOAT_CONST .)
    COMMA           reduce using rule 96 (constant -> FLOAT_CONST .)
    SEMI            reduce using rule 96 (constant -> FLOAT_CONST .)
    RPAREN          reduce using rule 96 (constant -> FLOAT_CONST .)
    RBRACE          reduce using rule 96 (constant -> FLOAT_CONST .)


state 58

    (97) constant -> CHAR_CONST .

    LBRACKET        reduce using rule 97 (constant -> CHAR_CONST .)
    LPAREN          reduce using rule 97 (constant -> CHAR_CONST .)
    PLUSPLUS        reduce using rule 97 (constant -> CHAR_CONST .)
    MINUSMINUS      reduce using rule 97 (constant -> CHAR_CONST .)
    TIMES           reduce using rule 97 (constant -> CHAR_CONST .)
    DIVIDE          reduce using rule 97 (constant -> CHAR_CONST .)
    MOD             reduce using rule 97 (constant -> CHAR_CONST .)
    PLUS            reduce using rule 97 (constant -> CHAR_CONST .)
    MINUS           reduce using rule 97 (constant -> CHAR_CONST .)
    LT              reduce using rule 97 (constant -> CHAR_CONST .)
    LTE             reduce using rule 97 (constant -> CHAR_CONST .)
    GT              reduce using rule 97 (constant -> CHAR_CONST .)
    GTE             reduce using rule 97 (constant -> CHAR_CONST .)
    EQUALS          reduce using rule 97 (constant -> CHAR_CONST .)
    NE              reduce using rule 97 (constant -> CHAR_CONST .)
    AND             reduce using rule 97 (constant -> CHAR_CONST .)
    OR              reduce using rule 97 (constant -> CHAR_CONST .)
    RBRACKET        reduce using rule 97 (constant -> CHAR_CONST .)
    ASSIGN          reduce using rule 97 (constant -> CHAR_CONST .)
    TIMESASSIGN     reduce using rule 97 (constant -> CHAR_CONST .)
    DIVIDEASSIGN    reduce using rule 97 (constant -> CHAR_CONST .)
    MODASSIGN       reduce using rule 97 (constant -> CHAR_CONST .)
    PLUSASSIGN      reduce using rule 97 (constant -> CHAR_CONST .)
    MINUSASSIGN     reduce using rule 97 (constant -> CHAR_CONST .)
    COMMA           reduce using rule 97 (constant -> CHAR_CONST .)
    SEMI            reduce using rule 97 (constant -> CHAR_CONST .)
    RPAREN          reduce using rule 97 (constant -> CHAR_CONST .)
    RBRACE          reduce using rule 97 (constant -> CHAR_CONST .)


state 59

    (98) constant -> STRING_CONST .

    LBRACKET        reduce using rule 98 (constant -> STRING_CONST .)
    LPAREN          reduce using rule 98 (constant -> STRING_CONST .)
    PLUSPLUS        reduce using rule 98 (constant -> STRING_CONST .)
    MINUSMINUS      reduce using rule 98 (constant -> STRING_CONST .)
    TIMES           reduce using rule 98 (constant -> STRING_CONST .)
    DIVIDE          reduce using rule 98 (constant -> STRING_CONST .)
    MOD             reduce using rule 98 (constant -> STRING_CONST .)
    PLUS            reduce using rule 98 (constant -> STRING_CONST .)
    MINUS           reduce using rule 98 (constant -> STRING_CONST .)
    LT              reduce using rule 98 (constant -> STRING_CONST .)
    LTE             reduce using rule 98 (constant -> STRING_CONST .)
    GT              reduce using rule 98 (constant -> STRING_CONST .)
    GTE             reduce using rule 98 (constant -> STRING_CONST .)
    EQUALS          reduce using rule 98 (constant -> STRING_CONST .)
    NE              reduce using rule 98 (constant -> STRING_CONST .)
    AND             reduce using rule 98 (constant -> STRING_CONST .)
    OR              reduce using rule 98 (constant -> STRING_CONST .)
    RBRACKET        reduce using rule 98 (constant -> STRING_CONST .)
    ASSIGN          reduce using rule 98 (constant -> STRING_CONST .)
    TIMESASSIGN     reduce using rule 98 (constant -> STRING_CONST .)
    DIVIDEASSIGN    reduce using rule 98 (constant -> STRING_CONST .)
    MODASSIGN       reduce using rule 98 (constant -> STRING_CONST .)
    PLUSASSIGN      reduce using rule 98 (constant -> STRING_CONST .)
    MINUSASSIGN     reduce using rule 98 (constant -> STRING_CONST .)
    COMMA           reduce using rule 98 (constant -> STRING_CONST .)
    SEMI            reduce using rule 98 (constant -> STRING_CONST .)
    RPAREN          reduce using rule 98 (constant -> STRING_CONST .)
    RBRACE          reduce using rule 98 (constant -> STRING_CONST .)


state 60

    (29) direct_declarator -> direct_declarator LPAREN parameter_list . RPAREN
    (120) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          shift and go to state 122
    COMMA           shift and go to state 123


state 61

    (30) direct_declarator -> direct_declarator LPAREN identifier_list . RPAREN
    (118) identifier_list -> identifier_list . COMMA identifier

    RPAREN          shift and go to state 124
    COMMA           shift and go to state 125


state 62

    (31) direct_declarator -> direct_declarator LPAREN empty . RPAREN

    RPAREN          shift and go to state 126


state 63

    (119) parameter_list -> parameter_declaration .

    RPAREN          reduce using rule 119 (parameter_list -> parameter_declaration .)
    COMMA           reduce using rule 119 (parameter_list -> parameter_declaration .)


state 64

    (117) identifier_list -> identifier .

    RPAREN          reduce using rule 117 (identifier_list -> identifier .)
    COMMA           reduce using rule 117 (identifier_list -> identifier .)


state 65

    (121) parameter_declaration -> type_specifier . declarator
    (8) declarator -> . direct_declarator
    (25) direct_declarator -> . identifier
    (26) direct_declarator -> . LPAREN declarator RPAREN
    (27) direct_declarator -> . direct_declarator LBRACKET constant_expression RBRACKET
    (28) direct_declarator -> . direct_declarator LBRACKET empty RBRACKET
    (29) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (30) direct_declarator -> . direct_declarator LPAREN identifier_list RPAREN
    (31) direct_declarator -> . direct_declarator LPAREN empty RPAREN
    (116) identifier -> . ID

    LPAREN          shift and go to state 15
    ID              shift and go to state 16

    declarator                     shift and go to state 127
    direct_declarator              shift and go to state 13
    identifier                     shift and go to state 14

state 66

    (26) direct_declarator -> LPAREN declarator RPAREN .

    LBRACKET        reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    LPAREN          reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    ASSIGN          reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 26 (direct_declarator -> LPAREN declarator RPAREN .)


state 67

    (6) function_definition -> type_specifier declarator declaration_list_opt compound_statement .

    VOID            reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 6 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)


state 68

    (13) init_declarator -> declarator ASSIGN initializer .

    COMMA           reduce using rule 13 (init_declarator -> declarator ASSIGN initializer .)
    SEMI            reduce using rule 13 (init_declarator -> declarator ASSIGN initializer .)


state 69

    (16) initializer -> assignment_expression .

    COMMA           reduce using rule 16 (initializer -> assignment_expression .)
    SEMI            reduce using rule 16 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 16 (initializer -> assignment_expression .)


state 70

    (17) initializer -> LBRACE . initializer_list RBRACE
    (18) initializer -> LBRACE . initializer_list COMMA RBRACE
    (19) initializer_list -> . initializer
    (20) initializer_list -> . initializer_list COMMA initializer
    (16) initializer -> . assignment_expression
    (17) initializer -> . LBRACE initializer_list RBRACE
    (18) initializer -> . LBRACE initializer_list COMMA RBRACE
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    LBRACE          shift and go to state 70
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    initializer_list               shift and go to state 128
    initializer                    shift and go to state 129
    assignment_expression          shift and go to state 69
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 71

    (105) assignment_expression -> binary_expression .
    (65) binary_expression -> binary_expression . TIMES binary_expression
    (66) binary_expression -> binary_expression . DIVIDE binary_expression
    (67) binary_expression -> binary_expression . MOD binary_expression
    (68) binary_expression -> binary_expression . PLUS binary_expression
    (69) binary_expression -> binary_expression . MINUS binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LTE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GTE binary_expression
    (74) binary_expression -> binary_expression . EQUALS binary_expression
    (75) binary_expression -> binary_expression . NE binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    COMMA           reduce using rule 105 (assignment_expression -> binary_expression .)
    SEMI            reduce using rule 105 (assignment_expression -> binary_expression .)
    RPAREN          reduce using rule 105 (assignment_expression -> binary_expression .)
    RBRACE          reduce using rule 105 (assignment_expression -> binary_expression .)
    RBRACKET        reduce using rule 105 (assignment_expression -> binary_expression .)
    TIMES           shift and go to state 99
    DIVIDE          shift and go to state 100
    MOD             shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    LT              shift and go to state 104
    LTE             shift and go to state 105
    GT              shift and go to state 106
    GTE             shift and go to state 107
    EQUALS          shift and go to state 108
    NE              shift and go to state 109
    AND             shift and go to state 110
    OR              shift and go to state 111


state 72

    (106) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (78) cast_expression -> unary_expression .
    (107) assignment_operator -> . ASSIGN
    (108) assignment_operator -> . TIMESASSIGN
    (109) assignment_operator -> . DIVIDEASSIGN
    (110) assignment_operator -> . MODASSIGN
    (111) assignment_operator -> . PLUSASSIGN
    (112) assignment_operator -> . MINUSASSIGN

    TIMES           reduce using rule 78 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 78 (cast_expression -> unary_expression .)
    MOD             reduce using rule 78 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 78 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 78 (cast_expression -> unary_expression .)
    LT              reduce using rule 78 (cast_expression -> unary_expression .)
    LTE             reduce using rule 78 (cast_expression -> unary_expression .)
    GT              reduce using rule 78 (cast_expression -> unary_expression .)
    GTE             reduce using rule 78 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 78 (cast_expression -> unary_expression .)
    NE              reduce using rule 78 (cast_expression -> unary_expression .)
    AND             reduce using rule 78 (cast_expression -> unary_expression .)
    OR              reduce using rule 78 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 78 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 78 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 78 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 78 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 78 (cast_expression -> unary_expression .)
    ASSIGN          shift and go to state 131
    TIMESASSIGN     shift and go to state 132
    DIVIDEASSIGN    shift and go to state 133
    MODASSIGN       shift and go to state 134
    PLUSASSIGN      shift and go to state 135
    MINUSASSIGN     shift and go to state 136

    assignment_operator            shift and go to state 130

state 73

    (15) init_declarator_list -> init_declarator_list COMMA init_declarator .

    COMMA           reduce using rule 15 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    SEMI            reduce using rule 15 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 74

    (37) compound_statement -> LBRACE block_item_list . RBRACE
    (36) block_item_list -> block_item_list . block_item
    (33) block_item -> . declaration
    (34) block_item -> . statement
    (9) declaration -> . decl_body SEMI
    (51) statement -> . expression_statement
    (52) statement -> . selection_statement
    (53) statement -> . compound_statement
    (54) statement -> . iteration_statement
    (55) statement -> . jump_statement
    (56) statement -> . assert_statement
    (57) statement -> . print_statement
    (58) statement -> . read_statement
    (10) decl_body -> . type_specifier init_declarator_list
    (11) decl_body -> . type_specifier empty
    (43) expression_statement -> . expression SEMI
    (44) expression_statement -> . empty SEMI
    (38) selection_statement -> . IF LPAREN expression RPAREN statement
    (39) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (37) compound_statement -> . LBRACE block_item_list RBRACE
    (40) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (41) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (42) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (49) jump_statement -> . BREAK SEMI
    (50) jump_statement -> . RETURN expression_opt SEMI
    (45) assert_statement -> . ASSERT expression SEMI
    (46) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (47) print_statement -> . PRINT LPAREN empty RPAREN SEMI
    (48) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (60) type_specifier -> . VOID
    (61) type_specifier -> . CHAR
    (62) type_specifier -> . INT
    (63) type_specifier -> . FLOAT
    (99) expression -> . assignment_expression
    (100) expression -> . expression COMMA assignment_expression
    (59) empty -> .
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    RBRACE          shift and go to state 137
    IF              shift and go to state 88
    LBRACE          shift and go to state 35
    WHILE           shift and go to state 89
    FOR             shift and go to state 90
    BREAK           shift and go to state 91
    RETURN          shift and go to state 92
    ASSERT          shift and go to state 93
    PRINT           shift and go to state 94
    READ            shift and go to state 95
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    SEMI            reduce using rule 59 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    block_item                     shift and go to state 138
    declaration                    shift and go to state 76
    statement                      shift and go to state 77
    decl_body                      shift and go to state 6
    expression_statement           shift and go to state 78
    selection_statement            shift and go to state 79
    compound_statement             shift and go to state 80
    iteration_statement            shift and go to state 81
    jump_statement                 shift and go to state 82
    assert_statement               shift and go to state 83
    print_statement                shift and go to state 84
    read_statement                 shift and go to state 85
    type_specifier                 shift and go to state 27
    empty                          shift and go to state 86
    expression                     shift and go to state 87
    assignment_expression          shift and go to state 96
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 75

    (35) block_item_list -> block_item .

    RBRACE          reduce using rule 35 (block_item_list -> block_item .)
    IF              reduce using rule 35 (block_item_list -> block_item .)
    LBRACE          reduce using rule 35 (block_item_list -> block_item .)
    WHILE           reduce using rule 35 (block_item_list -> block_item .)
    FOR             reduce using rule 35 (block_item_list -> block_item .)
    BREAK           reduce using rule 35 (block_item_list -> block_item .)
    RETURN          reduce using rule 35 (block_item_list -> block_item .)
    ASSERT          reduce using rule 35 (block_item_list -> block_item .)
    PRINT           reduce using rule 35 (block_item_list -> block_item .)
    READ            reduce using rule 35 (block_item_list -> block_item .)
    VOID            reduce using rule 35 (block_item_list -> block_item .)
    CHAR            reduce using rule 35 (block_item_list -> block_item .)
    INT             reduce using rule 35 (block_item_list -> block_item .)
    FLOAT           reduce using rule 35 (block_item_list -> block_item .)
    PLUSPLUS        reduce using rule 35 (block_item_list -> block_item .)
    MINUSMINUS      reduce using rule 35 (block_item_list -> block_item .)
    LPAREN          reduce using rule 35 (block_item_list -> block_item .)
    ADDRESS         reduce using rule 35 (block_item_list -> block_item .)
    TIMES           reduce using rule 35 (block_item_list -> block_item .)
    PLUS            reduce using rule 35 (block_item_list -> block_item .)
    MINUS           reduce using rule 35 (block_item_list -> block_item .)
    NOT             reduce using rule 35 (block_item_list -> block_item .)
    ID              reduce using rule 35 (block_item_list -> block_item .)
    INT_CONST       reduce using rule 35 (block_item_list -> block_item .)
    FLOAT_CONST     reduce using rule 35 (block_item_list -> block_item .)
    CHAR_CONST      reduce using rule 35 (block_item_list -> block_item .)
    STRING_CONST    reduce using rule 35 (block_item_list -> block_item .)
    SEMI            reduce using rule 35 (block_item_list -> block_item .)


state 76

    (33) block_item -> declaration .

    RBRACE          reduce using rule 33 (block_item -> declaration .)
    IF              reduce using rule 33 (block_item -> declaration .)
    LBRACE          reduce using rule 33 (block_item -> declaration .)
    WHILE           reduce using rule 33 (block_item -> declaration .)
    FOR             reduce using rule 33 (block_item -> declaration .)
    BREAK           reduce using rule 33 (block_item -> declaration .)
    RETURN          reduce using rule 33 (block_item -> declaration .)
    ASSERT          reduce using rule 33 (block_item -> declaration .)
    PRINT           reduce using rule 33 (block_item -> declaration .)
    READ            reduce using rule 33 (block_item -> declaration .)
    VOID            reduce using rule 33 (block_item -> declaration .)
    CHAR            reduce using rule 33 (block_item -> declaration .)
    INT             reduce using rule 33 (block_item -> declaration .)
    FLOAT           reduce using rule 33 (block_item -> declaration .)
    PLUSPLUS        reduce using rule 33 (block_item -> declaration .)
    MINUSMINUS      reduce using rule 33 (block_item -> declaration .)
    LPAREN          reduce using rule 33 (block_item -> declaration .)
    ADDRESS         reduce using rule 33 (block_item -> declaration .)
    TIMES           reduce using rule 33 (block_item -> declaration .)
    PLUS            reduce using rule 33 (block_item -> declaration .)
    MINUS           reduce using rule 33 (block_item -> declaration .)
    NOT             reduce using rule 33 (block_item -> declaration .)
    ID              reduce using rule 33 (block_item -> declaration .)
    INT_CONST       reduce using rule 33 (block_item -> declaration .)
    FLOAT_CONST     reduce using rule 33 (block_item -> declaration .)
    CHAR_CONST      reduce using rule 33 (block_item -> declaration .)
    STRING_CONST    reduce using rule 33 (block_item -> declaration .)
    SEMI            reduce using rule 33 (block_item -> declaration .)


state 77

    (34) block_item -> statement .

    RBRACE          reduce using rule 34 (block_item -> statement .)
    IF              reduce using rule 34 (block_item -> statement .)
    LBRACE          reduce using rule 34 (block_item -> statement .)
    WHILE           reduce using rule 34 (block_item -> statement .)
    FOR             reduce using rule 34 (block_item -> statement .)
    BREAK           reduce using rule 34 (block_item -> statement .)
    RETURN          reduce using rule 34 (block_item -> statement .)
    ASSERT          reduce using rule 34 (block_item -> statement .)
    PRINT           reduce using rule 34 (block_item -> statement .)
    READ            reduce using rule 34 (block_item -> statement .)
    VOID            reduce using rule 34 (block_item -> statement .)
    CHAR            reduce using rule 34 (block_item -> statement .)
    INT             reduce using rule 34 (block_item -> statement .)
    FLOAT           reduce using rule 34 (block_item -> statement .)
    PLUSPLUS        reduce using rule 34 (block_item -> statement .)
    MINUSMINUS      reduce using rule 34 (block_item -> statement .)
    LPAREN          reduce using rule 34 (block_item -> statement .)
    ADDRESS         reduce using rule 34 (block_item -> statement .)
    TIMES           reduce using rule 34 (block_item -> statement .)
    PLUS            reduce using rule 34 (block_item -> statement .)
    MINUS           reduce using rule 34 (block_item -> statement .)
    NOT             reduce using rule 34 (block_item -> statement .)
    ID              reduce using rule 34 (block_item -> statement .)
    INT_CONST       reduce using rule 34 (block_item -> statement .)
    FLOAT_CONST     reduce using rule 34 (block_item -> statement .)
    CHAR_CONST      reduce using rule 34 (block_item -> statement .)
    STRING_CONST    reduce using rule 34 (block_item -> statement .)
    SEMI            reduce using rule 34 (block_item -> statement .)


state 78

    (51) statement -> expression_statement .

    RBRACE          reduce using rule 51 (statement -> expression_statement .)
    IF              reduce using rule 51 (statement -> expression_statement .)
    LBRACE          reduce using rule 51 (statement -> expression_statement .)
    WHILE           reduce using rule 51 (statement -> expression_statement .)
    FOR             reduce using rule 51 (statement -> expression_statement .)
    BREAK           reduce using rule 51 (statement -> expression_statement .)
    RETURN          reduce using rule 51 (statement -> expression_statement .)
    ASSERT          reduce using rule 51 (statement -> expression_statement .)
    PRINT           reduce using rule 51 (statement -> expression_statement .)
    READ            reduce using rule 51 (statement -> expression_statement .)
    VOID            reduce using rule 51 (statement -> expression_statement .)
    CHAR            reduce using rule 51 (statement -> expression_statement .)
    INT             reduce using rule 51 (statement -> expression_statement .)
    FLOAT           reduce using rule 51 (statement -> expression_statement .)
    PLUSPLUS        reduce using rule 51 (statement -> expression_statement .)
    MINUSMINUS      reduce using rule 51 (statement -> expression_statement .)
    LPAREN          reduce using rule 51 (statement -> expression_statement .)
    ADDRESS         reduce using rule 51 (statement -> expression_statement .)
    TIMES           reduce using rule 51 (statement -> expression_statement .)
    PLUS            reduce using rule 51 (statement -> expression_statement .)
    MINUS           reduce using rule 51 (statement -> expression_statement .)
    NOT             reduce using rule 51 (statement -> expression_statement .)
    ID              reduce using rule 51 (statement -> expression_statement .)
    INT_CONST       reduce using rule 51 (statement -> expression_statement .)
    FLOAT_CONST     reduce using rule 51 (statement -> expression_statement .)
    CHAR_CONST      reduce using rule 51 (statement -> expression_statement .)
    STRING_CONST    reduce using rule 51 (statement -> expression_statement .)
    SEMI            reduce using rule 51 (statement -> expression_statement .)
    ELSE            reduce using rule 51 (statement -> expression_statement .)


state 79

    (52) statement -> selection_statement .

    RBRACE          reduce using rule 52 (statement -> selection_statement .)
    IF              reduce using rule 52 (statement -> selection_statement .)
    LBRACE          reduce using rule 52 (statement -> selection_statement .)
    WHILE           reduce using rule 52 (statement -> selection_statement .)
    FOR             reduce using rule 52 (statement -> selection_statement .)
    BREAK           reduce using rule 52 (statement -> selection_statement .)
    RETURN          reduce using rule 52 (statement -> selection_statement .)
    ASSERT          reduce using rule 52 (statement -> selection_statement .)
    PRINT           reduce using rule 52 (statement -> selection_statement .)
    READ            reduce using rule 52 (statement -> selection_statement .)
    VOID            reduce using rule 52 (statement -> selection_statement .)
    CHAR            reduce using rule 52 (statement -> selection_statement .)
    INT             reduce using rule 52 (statement -> selection_statement .)
    FLOAT           reduce using rule 52 (statement -> selection_statement .)
    PLUSPLUS        reduce using rule 52 (statement -> selection_statement .)
    MINUSMINUS      reduce using rule 52 (statement -> selection_statement .)
    LPAREN          reduce using rule 52 (statement -> selection_statement .)
    ADDRESS         reduce using rule 52 (statement -> selection_statement .)
    TIMES           reduce using rule 52 (statement -> selection_statement .)
    PLUS            reduce using rule 52 (statement -> selection_statement .)
    MINUS           reduce using rule 52 (statement -> selection_statement .)
    NOT             reduce using rule 52 (statement -> selection_statement .)
    ID              reduce using rule 52 (statement -> selection_statement .)
    INT_CONST       reduce using rule 52 (statement -> selection_statement .)
    FLOAT_CONST     reduce using rule 52 (statement -> selection_statement .)
    CHAR_CONST      reduce using rule 52 (statement -> selection_statement .)
    STRING_CONST    reduce using rule 52 (statement -> selection_statement .)
    SEMI            reduce using rule 52 (statement -> selection_statement .)
    ELSE            reduce using rule 52 (statement -> selection_statement .)


state 80

    (53) statement -> compound_statement .

    RBRACE          reduce using rule 53 (statement -> compound_statement .)
    IF              reduce using rule 53 (statement -> compound_statement .)
    LBRACE          reduce using rule 53 (statement -> compound_statement .)
    WHILE           reduce using rule 53 (statement -> compound_statement .)
    FOR             reduce using rule 53 (statement -> compound_statement .)
    BREAK           reduce using rule 53 (statement -> compound_statement .)
    RETURN          reduce using rule 53 (statement -> compound_statement .)
    ASSERT          reduce using rule 53 (statement -> compound_statement .)
    PRINT           reduce using rule 53 (statement -> compound_statement .)
    READ            reduce using rule 53 (statement -> compound_statement .)
    VOID            reduce using rule 53 (statement -> compound_statement .)
    CHAR            reduce using rule 53 (statement -> compound_statement .)
    INT             reduce using rule 53 (statement -> compound_statement .)
    FLOAT           reduce using rule 53 (statement -> compound_statement .)
    PLUSPLUS        reduce using rule 53 (statement -> compound_statement .)
    MINUSMINUS      reduce using rule 53 (statement -> compound_statement .)
    LPAREN          reduce using rule 53 (statement -> compound_statement .)
    ADDRESS         reduce using rule 53 (statement -> compound_statement .)
    TIMES           reduce using rule 53 (statement -> compound_statement .)
    PLUS            reduce using rule 53 (statement -> compound_statement .)
    MINUS           reduce using rule 53 (statement -> compound_statement .)
    NOT             reduce using rule 53 (statement -> compound_statement .)
    ID              reduce using rule 53 (statement -> compound_statement .)
    INT_CONST       reduce using rule 53 (statement -> compound_statement .)
    FLOAT_CONST     reduce using rule 53 (statement -> compound_statement .)
    CHAR_CONST      reduce using rule 53 (statement -> compound_statement .)
    STRING_CONST    reduce using rule 53 (statement -> compound_statement .)
    SEMI            reduce using rule 53 (statement -> compound_statement .)
    ELSE            reduce using rule 53 (statement -> compound_statement .)


state 81

    (54) statement -> iteration_statement .

    RBRACE          reduce using rule 54 (statement -> iteration_statement .)
    IF              reduce using rule 54 (statement -> iteration_statement .)
    LBRACE          reduce using rule 54 (statement -> iteration_statement .)
    WHILE           reduce using rule 54 (statement -> iteration_statement .)
    FOR             reduce using rule 54 (statement -> iteration_statement .)
    BREAK           reduce using rule 54 (statement -> iteration_statement .)
    RETURN          reduce using rule 54 (statement -> iteration_statement .)
    ASSERT          reduce using rule 54 (statement -> iteration_statement .)
    PRINT           reduce using rule 54 (statement -> iteration_statement .)
    READ            reduce using rule 54 (statement -> iteration_statement .)
    VOID            reduce using rule 54 (statement -> iteration_statement .)
    CHAR            reduce using rule 54 (statement -> iteration_statement .)
    INT             reduce using rule 54 (statement -> iteration_statement .)
    FLOAT           reduce using rule 54 (statement -> iteration_statement .)
    PLUSPLUS        reduce using rule 54 (statement -> iteration_statement .)
    MINUSMINUS      reduce using rule 54 (statement -> iteration_statement .)
    LPAREN          reduce using rule 54 (statement -> iteration_statement .)
    ADDRESS         reduce using rule 54 (statement -> iteration_statement .)
    TIMES           reduce using rule 54 (statement -> iteration_statement .)
    PLUS            reduce using rule 54 (statement -> iteration_statement .)
    MINUS           reduce using rule 54 (statement -> iteration_statement .)
    NOT             reduce using rule 54 (statement -> iteration_statement .)
    ID              reduce using rule 54 (statement -> iteration_statement .)
    INT_CONST       reduce using rule 54 (statement -> iteration_statement .)
    FLOAT_CONST     reduce using rule 54 (statement -> iteration_statement .)
    CHAR_CONST      reduce using rule 54 (statement -> iteration_statement .)
    STRING_CONST    reduce using rule 54 (statement -> iteration_statement .)
    SEMI            reduce using rule 54 (statement -> iteration_statement .)
    ELSE            reduce using rule 54 (statement -> iteration_statement .)


state 82

    (55) statement -> jump_statement .

    RBRACE          reduce using rule 55 (statement -> jump_statement .)
    IF              reduce using rule 55 (statement -> jump_statement .)
    LBRACE          reduce using rule 55 (statement -> jump_statement .)
    WHILE           reduce using rule 55 (statement -> jump_statement .)
    FOR             reduce using rule 55 (statement -> jump_statement .)
    BREAK           reduce using rule 55 (statement -> jump_statement .)
    RETURN          reduce using rule 55 (statement -> jump_statement .)
    ASSERT          reduce using rule 55 (statement -> jump_statement .)
    PRINT           reduce using rule 55 (statement -> jump_statement .)
    READ            reduce using rule 55 (statement -> jump_statement .)
    VOID            reduce using rule 55 (statement -> jump_statement .)
    CHAR            reduce using rule 55 (statement -> jump_statement .)
    INT             reduce using rule 55 (statement -> jump_statement .)
    FLOAT           reduce using rule 55 (statement -> jump_statement .)
    PLUSPLUS        reduce using rule 55 (statement -> jump_statement .)
    MINUSMINUS      reduce using rule 55 (statement -> jump_statement .)
    LPAREN          reduce using rule 55 (statement -> jump_statement .)
    ADDRESS         reduce using rule 55 (statement -> jump_statement .)
    TIMES           reduce using rule 55 (statement -> jump_statement .)
    PLUS            reduce using rule 55 (statement -> jump_statement .)
    MINUS           reduce using rule 55 (statement -> jump_statement .)
    NOT             reduce using rule 55 (statement -> jump_statement .)
    ID              reduce using rule 55 (statement -> jump_statement .)
    INT_CONST       reduce using rule 55 (statement -> jump_statement .)
    FLOAT_CONST     reduce using rule 55 (statement -> jump_statement .)
    CHAR_CONST      reduce using rule 55 (statement -> jump_statement .)
    STRING_CONST    reduce using rule 55 (statement -> jump_statement .)
    SEMI            reduce using rule 55 (statement -> jump_statement .)
    ELSE            reduce using rule 55 (statement -> jump_statement .)


state 83

    (56) statement -> assert_statement .

    RBRACE          reduce using rule 56 (statement -> assert_statement .)
    IF              reduce using rule 56 (statement -> assert_statement .)
    LBRACE          reduce using rule 56 (statement -> assert_statement .)
    WHILE           reduce using rule 56 (statement -> assert_statement .)
    FOR             reduce using rule 56 (statement -> assert_statement .)
    BREAK           reduce using rule 56 (statement -> assert_statement .)
    RETURN          reduce using rule 56 (statement -> assert_statement .)
    ASSERT          reduce using rule 56 (statement -> assert_statement .)
    PRINT           reduce using rule 56 (statement -> assert_statement .)
    READ            reduce using rule 56 (statement -> assert_statement .)
    VOID            reduce using rule 56 (statement -> assert_statement .)
    CHAR            reduce using rule 56 (statement -> assert_statement .)
    INT             reduce using rule 56 (statement -> assert_statement .)
    FLOAT           reduce using rule 56 (statement -> assert_statement .)
    PLUSPLUS        reduce using rule 56 (statement -> assert_statement .)
    MINUSMINUS      reduce using rule 56 (statement -> assert_statement .)
    LPAREN          reduce using rule 56 (statement -> assert_statement .)
    ADDRESS         reduce using rule 56 (statement -> assert_statement .)
    TIMES           reduce using rule 56 (statement -> assert_statement .)
    PLUS            reduce using rule 56 (statement -> assert_statement .)
    MINUS           reduce using rule 56 (statement -> assert_statement .)
    NOT             reduce using rule 56 (statement -> assert_statement .)
    ID              reduce using rule 56 (statement -> assert_statement .)
    INT_CONST       reduce using rule 56 (statement -> assert_statement .)
    FLOAT_CONST     reduce using rule 56 (statement -> assert_statement .)
    CHAR_CONST      reduce using rule 56 (statement -> assert_statement .)
    STRING_CONST    reduce using rule 56 (statement -> assert_statement .)
    SEMI            reduce using rule 56 (statement -> assert_statement .)
    ELSE            reduce using rule 56 (statement -> assert_statement .)


state 84

    (57) statement -> print_statement .

    RBRACE          reduce using rule 57 (statement -> print_statement .)
    IF              reduce using rule 57 (statement -> print_statement .)
    LBRACE          reduce using rule 57 (statement -> print_statement .)
    WHILE           reduce using rule 57 (statement -> print_statement .)
    FOR             reduce using rule 57 (statement -> print_statement .)
    BREAK           reduce using rule 57 (statement -> print_statement .)
    RETURN          reduce using rule 57 (statement -> print_statement .)
    ASSERT          reduce using rule 57 (statement -> print_statement .)
    PRINT           reduce using rule 57 (statement -> print_statement .)
    READ            reduce using rule 57 (statement -> print_statement .)
    VOID            reduce using rule 57 (statement -> print_statement .)
    CHAR            reduce using rule 57 (statement -> print_statement .)
    INT             reduce using rule 57 (statement -> print_statement .)
    FLOAT           reduce using rule 57 (statement -> print_statement .)
    PLUSPLUS        reduce using rule 57 (statement -> print_statement .)
    MINUSMINUS      reduce using rule 57 (statement -> print_statement .)
    LPAREN          reduce using rule 57 (statement -> print_statement .)
    ADDRESS         reduce using rule 57 (statement -> print_statement .)
    TIMES           reduce using rule 57 (statement -> print_statement .)
    PLUS            reduce using rule 57 (statement -> print_statement .)
    MINUS           reduce using rule 57 (statement -> print_statement .)
    NOT             reduce using rule 57 (statement -> print_statement .)
    ID              reduce using rule 57 (statement -> print_statement .)
    INT_CONST       reduce using rule 57 (statement -> print_statement .)
    FLOAT_CONST     reduce using rule 57 (statement -> print_statement .)
    CHAR_CONST      reduce using rule 57 (statement -> print_statement .)
    STRING_CONST    reduce using rule 57 (statement -> print_statement .)
    SEMI            reduce using rule 57 (statement -> print_statement .)
    ELSE            reduce using rule 57 (statement -> print_statement .)


state 85

    (58) statement -> read_statement .

    RBRACE          reduce using rule 58 (statement -> read_statement .)
    IF              reduce using rule 58 (statement -> read_statement .)
    LBRACE          reduce using rule 58 (statement -> read_statement .)
    WHILE           reduce using rule 58 (statement -> read_statement .)
    FOR             reduce using rule 58 (statement -> read_statement .)
    BREAK           reduce using rule 58 (statement -> read_statement .)
    RETURN          reduce using rule 58 (statement -> read_statement .)
    ASSERT          reduce using rule 58 (statement -> read_statement .)
    PRINT           reduce using rule 58 (statement -> read_statement .)
    READ            reduce using rule 58 (statement -> read_statement .)
    VOID            reduce using rule 58 (statement -> read_statement .)
    CHAR            reduce using rule 58 (statement -> read_statement .)
    INT             reduce using rule 58 (statement -> read_statement .)
    FLOAT           reduce using rule 58 (statement -> read_statement .)
    PLUSPLUS        reduce using rule 58 (statement -> read_statement .)
    MINUSMINUS      reduce using rule 58 (statement -> read_statement .)
    LPAREN          reduce using rule 58 (statement -> read_statement .)
    ADDRESS         reduce using rule 58 (statement -> read_statement .)
    TIMES           reduce using rule 58 (statement -> read_statement .)
    PLUS            reduce using rule 58 (statement -> read_statement .)
    MINUS           reduce using rule 58 (statement -> read_statement .)
    NOT             reduce using rule 58 (statement -> read_statement .)
    ID              reduce using rule 58 (statement -> read_statement .)
    INT_CONST       reduce using rule 58 (statement -> read_statement .)
    FLOAT_CONST     reduce using rule 58 (statement -> read_statement .)
    CHAR_CONST      reduce using rule 58 (statement -> read_statement .)
    STRING_CONST    reduce using rule 58 (statement -> read_statement .)
    SEMI            reduce using rule 58 (statement -> read_statement .)
    ELSE            reduce using rule 58 (statement -> read_statement .)


state 86

    (44) expression_statement -> empty . SEMI

    SEMI            shift and go to state 139


state 87

    (43) expression_statement -> expression . SEMI
    (100) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 140
    COMMA           shift and go to state 141


state 88

    (38) selection_statement -> IF . LPAREN expression RPAREN statement
    (39) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 142


state 89

    (40) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 143


state 90

    (41) iteration_statement -> FOR . LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (42) iteration_statement -> FOR . LPAREN declaration expression_opt SEMI expression_opt RPAREN statement

    LPAREN          shift and go to state 144


state 91

    (49) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 145


state 92

    (50) jump_statement -> RETURN . expression_opt SEMI
    (101) expression_opt -> . expression
    (102) expression_opt -> . empty
    (99) expression -> . assignment_expression
    (100) expression -> . expression COMMA assignment_expression
    (59) empty -> .
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    SEMI            reduce using rule 59 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    expression_opt                 shift and go to state 146
    expression                     shift and go to state 147
    empty                          shift and go to state 148
    assignment_expression          shift and go to state 96
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 93

    (45) assert_statement -> ASSERT . expression SEMI
    (99) expression -> . assignment_expression
    (100) expression -> . expression COMMA assignment_expression
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    expression                     shift and go to state 149
    assignment_expression          shift and go to state 96
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 94

    (46) print_statement -> PRINT . LPAREN expression RPAREN SEMI
    (47) print_statement -> PRINT . LPAREN empty RPAREN SEMI

    LPAREN          shift and go to state 150


state 95

    (48) read_statement -> READ . LPAREN argument_expression RPAREN SEMI

    LPAREN          shift and go to state 151


state 96

    (99) expression -> assignment_expression .

    SEMI            reduce using rule 99 (expression -> assignment_expression .)
    COMMA           reduce using rule 99 (expression -> assignment_expression .)
    RPAREN          reduce using rule 99 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 99 (expression -> assignment_expression .)


state 97

    (27) direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .

    LBRACKET        reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    LPAREN          reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    VOID            reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    CHAR            reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    INT             reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    FLOAT           reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    LBRACE          reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    ASSIGN          reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    COMMA           reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    SEMI            reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)
    RPAREN          reduce using rule 27 (direct_declarator -> direct_declarator LBRACKET constant_expression RBRACKET .)


state 98

    (28) direct_declarator -> direct_declarator LBRACKET empty RBRACKET .

    LBRACKET        reduce using rule 28 (direct_declarator -> direct_declarator LBRACKET empty RBRACKET .)
    LPAREN          reduce using rule 28 (direct_declarator -> direct_declarator LBRACKET empty RBRACKET .)
    VOID            reduce using rule 28 (direct_declarator -> direct_declarator LBRACKET empty RBRACKET .)
    CHAR            reduce using rule 28 (direct_declarator -> direct_declarator LBRACKET empty RBRACKET .)
    INT             reduce using rule 28 (direct_declarator -> direct_declarator LBRACKET empty RBRACKET .)
    FLOAT           reduce using rule 28 (direct_declarator -> direct_declarator LBRACKET empty RBRACKET .)
    LBRACE          reduce using rule 28 (direct_declarator -> direct_declarator LBRACKET empty RBRACKET .)
    ASSIGN          reduce using rule 28 (direct_declarator -> direct_declarator LBRACKET empty RBRACKET .)
    COMMA           reduce using rule 28 (direct_declarator -> direct_declarator LBRACKET empty RBRACKET .)
    SEMI            reduce using rule 28 (direct_declarator -> direct_declarator LBRACKET empty RBRACKET .)
    RPAREN          reduce using rule 28 (direct_declarator -> direct_declarator LBRACKET empty RBRACKET .)


state 99

    (65) binary_expression -> binary_expression TIMES . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    binary_expression              shift and go to state 152
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 100

    (66) binary_expression -> binary_expression DIVIDE . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    binary_expression              shift and go to state 153
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 101

    (67) binary_expression -> binary_expression MOD . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    binary_expression              shift and go to state 154
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 102

    (68) binary_expression -> binary_expression PLUS . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    binary_expression              shift and go to state 155
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 103

    (69) binary_expression -> binary_expression MINUS . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    binary_expression              shift and go to state 156
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 104

    (70) binary_expression -> binary_expression LT . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    binary_expression              shift and go to state 157
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 105

    (71) binary_expression -> binary_expression LTE . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    binary_expression              shift and go to state 158
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 106

    (72) binary_expression -> binary_expression GT . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    binary_expression              shift and go to state 159
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 107

    (73) binary_expression -> binary_expression GTE . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    binary_expression              shift and go to state 160
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 108

    (74) binary_expression -> binary_expression EQUALS . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    binary_expression              shift and go to state 161
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 109

    (75) binary_expression -> binary_expression NE . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    binary_expression              shift and go to state 162
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 110

    (76) binary_expression -> binary_expression AND . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    binary_expression              shift and go to state 163
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 111

    (77) binary_expression -> binary_expression OR . binary_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    binary_expression              shift and go to state 164
    cast_expression                shift and go to state 41
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 112

    (79) cast_expression -> LPAREN type_specifier . RPAREN cast_expression

    RPAREN          shift and go to state 165


state 113

    (115) primary_expression -> LPAREN expression . RPAREN
    (100) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 166
    COMMA           shift and go to state 141


state 114

    (90) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (99) expression -> . assignment_expression
    (100) expression -> . expression COMMA assignment_expression
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    postfix_expression             shift and go to state 47
    expression                     shift and go to state 167
    assignment_expression          shift and go to state 96
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    cast_expression                shift and go to state 41
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 115

    (91) postfix_expression -> postfix_expression LPAREN . argument_expression RPAREN
    (92) postfix_expression -> postfix_expression LPAREN . RPAREN
    (103) argument_expression -> . assignment_expression
    (104) argument_expression -> . argument_expression COMMA assignment_expression
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    RPAREN          shift and go to state 169
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    postfix_expression             shift and go to state 47
    argument_expression            shift and go to state 168
    assignment_expression          shift and go to state 170
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    cast_expression                shift and go to state 41
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 116

    (93) postfix_expression -> postfix_expression PLUSPLUS .

    LBRACKET        reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    LPAREN          reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSPLUS        reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMES           reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVIDE          reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    MOD             reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUS            reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUS           reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    LT              reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    LTE             reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    GT              reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    GTE             reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQUALS          reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    NE              reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    AND             reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    OR              reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACKET        reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    ASSIGN          reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMESASSIGN     reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVIDEASSIGN    reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    MODASSIGN       reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUSASSIGN      reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSASSIGN     reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    COMMA           reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    SEMI            reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    RPAREN          reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACE          reduce using rule 93 (postfix_expression -> postfix_expression PLUSPLUS .)


state 117

    (94) postfix_expression -> postfix_expression MINUSMINUS .

    LBRACKET        reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    LPAREN          reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSPLUS        reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMES           reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVIDE          reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    MOD             reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUS            reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUS           reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    LT              reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    LTE             reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    GT              reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    GTE             reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQUALS          reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    NE              reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    AND             reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    OR              reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACKET        reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    ASSIGN          reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMESASSIGN     reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVIDEASSIGN    reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    MODASSIGN       reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUSASSIGN      reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSASSIGN     reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    COMMA           reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    SEMI            reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    RPAREN          reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACE          reduce using rule 94 (postfix_expression -> postfix_expression MINUSMINUS .)


state 118

    (81) unary_expression -> PLUSPLUS unary_expression .

    TIMES           reduce using rule 81 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDE          reduce using rule 81 (unary_expression -> PLUSPLUS unary_expression .)
    MOD             reduce using rule 81 (unary_expression -> PLUSPLUS unary_expression .)
    PLUS            reduce using rule 81 (unary_expression -> PLUSPLUS unary_expression .)
    MINUS           reduce using rule 81 (unary_expression -> PLUSPLUS unary_expression .)
    LT              reduce using rule 81 (unary_expression -> PLUSPLUS unary_expression .)
    LTE             reduce using rule 81 (unary_expression -> PLUSPLUS unary_expression .)
    GT              reduce using rule 81 (unary_expression -> PLUSPLUS unary_expression .)
    GTE             reduce using rule 81 (unary_expression -> PLUSPLUS unary_expression .)
    EQUALS          reduce using rule 81 (unary_expression -> PLUSPLUS unary_expression .)
    NE              reduce using rule 81 (unary_expression -> PLUSPLUS unary_expression .)
    AND             reduce using rule 81 (unary_expression -> PLUSPLUS unary_expression .)
    OR              reduce using rule 81 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACKET        reduce using rule 81 (unary_expression -> PLUSPLUS unary_expression .)
    ASSIGN          reduce using rule 81 (unary_expression -> PLUSPLUS unary_expression .)
    TIMESASSIGN     reduce using rule 81 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDEASSIGN    reduce using rule 81 (unary_expression -> PLUSPLUS unary_expression .)
    MODASSIGN       reduce using rule 81 (unary_expression -> PLUSPLUS unary_expression .)
    PLUSASSIGN      reduce using rule 81 (unary_expression -> PLUSPLUS unary_expression .)
    MINUSASSIGN     reduce using rule 81 (unary_expression -> PLUSPLUS unary_expression .)
    COMMA           reduce using rule 81 (unary_expression -> PLUSPLUS unary_expression .)
    SEMI            reduce using rule 81 (unary_expression -> PLUSPLUS unary_expression .)
    RPAREN          reduce using rule 81 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACE          reduce using rule 81 (unary_expression -> PLUSPLUS unary_expression .)


state 119

    (115) primary_expression -> LPAREN . expression RPAREN
    (99) expression -> . assignment_expression
    (100) expression -> . expression COMMA assignment_expression
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    expression                     shift and go to state 113
    assignment_expression          shift and go to state 96
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 120

    (82) unary_expression -> MINUSMINUS unary_expression .

    TIMES           reduce using rule 82 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDE          reduce using rule 82 (unary_expression -> MINUSMINUS unary_expression .)
    MOD             reduce using rule 82 (unary_expression -> MINUSMINUS unary_expression .)
    PLUS            reduce using rule 82 (unary_expression -> MINUSMINUS unary_expression .)
    MINUS           reduce using rule 82 (unary_expression -> MINUSMINUS unary_expression .)
    LT              reduce using rule 82 (unary_expression -> MINUSMINUS unary_expression .)
    LTE             reduce using rule 82 (unary_expression -> MINUSMINUS unary_expression .)
    GT              reduce using rule 82 (unary_expression -> MINUSMINUS unary_expression .)
    GTE             reduce using rule 82 (unary_expression -> MINUSMINUS unary_expression .)
    EQUALS          reduce using rule 82 (unary_expression -> MINUSMINUS unary_expression .)
    NE              reduce using rule 82 (unary_expression -> MINUSMINUS unary_expression .)
    AND             reduce using rule 82 (unary_expression -> MINUSMINUS unary_expression .)
    OR              reduce using rule 82 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACKET        reduce using rule 82 (unary_expression -> MINUSMINUS unary_expression .)
    ASSIGN          reduce using rule 82 (unary_expression -> MINUSMINUS unary_expression .)
    TIMESASSIGN     reduce using rule 82 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDEASSIGN    reduce using rule 82 (unary_expression -> MINUSMINUS unary_expression .)
    MODASSIGN       reduce using rule 82 (unary_expression -> MINUSMINUS unary_expression .)
    PLUSASSIGN      reduce using rule 82 (unary_expression -> MINUSMINUS unary_expression .)
    MINUSASSIGN     reduce using rule 82 (unary_expression -> MINUSMINUS unary_expression .)
    COMMA           reduce using rule 82 (unary_expression -> MINUSMINUS unary_expression .)
    SEMI            reduce using rule 82 (unary_expression -> MINUSMINUS unary_expression .)
    RPAREN          reduce using rule 82 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACE          reduce using rule 82 (unary_expression -> MINUSMINUS unary_expression .)


state 121

    (83) unary_expression -> unary_operator cast_expression .

    TIMES           reduce using rule 83 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 83 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 83 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 83 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 83 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 83 (unary_expression -> unary_operator cast_expression .)
    LTE             reduce using rule 83 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 83 (unary_expression -> unary_operator cast_expression .)
    GTE             reduce using rule 83 (unary_expression -> unary_operator cast_expression .)
    EQUALS          reduce using rule 83 (unary_expression -> unary_operator cast_expression .)
    NE              reduce using rule 83 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 83 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 83 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 83 (unary_expression -> unary_operator cast_expression .)
    ASSIGN          reduce using rule 83 (unary_expression -> unary_operator cast_expression .)
    TIMESASSIGN     reduce using rule 83 (unary_expression -> unary_operator cast_expression .)
    DIVIDEASSIGN    reduce using rule 83 (unary_expression -> unary_operator cast_expression .)
    MODASSIGN       reduce using rule 83 (unary_expression -> unary_operator cast_expression .)
    PLUSASSIGN      reduce using rule 83 (unary_expression -> unary_operator cast_expression .)
    MINUSASSIGN     reduce using rule 83 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 83 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 83 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 83 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 83 (unary_expression -> unary_operator cast_expression .)


state 122

    (29) direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .

    LBRACKET        reduce using rule 29 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LPAREN          reduce using rule 29 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    VOID            reduce using rule 29 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    CHAR            reduce using rule 29 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    INT             reduce using rule 29 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    FLOAT           reduce using rule 29 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LBRACE          reduce using rule 29 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    ASSIGN          reduce using rule 29 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 29 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 29 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 29 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)


state 123

    (120) parameter_list -> parameter_list COMMA . parameter_declaration
    (121) parameter_declaration -> . type_specifier declarator
    (60) type_specifier -> . VOID
    (61) type_specifier -> . CHAR
    (62) type_specifier -> . INT
    (63) type_specifier -> . FLOAT

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12

    parameter_declaration          shift and go to state 171
    type_specifier                 shift and go to state 65

state 124

    (30) direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .

    LBRACKET        reduce using rule 30 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LPAREN          reduce using rule 30 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    VOID            reduce using rule 30 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    CHAR            reduce using rule 30 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    INT             reduce using rule 30 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    FLOAT           reduce using rule 30 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    LBRACE          reduce using rule 30 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    ASSIGN          reduce using rule 30 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    COMMA           reduce using rule 30 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    SEMI            reduce using rule 30 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)
    RPAREN          reduce using rule 30 (direct_declarator -> direct_declarator LPAREN identifier_list RPAREN .)


state 125

    (118) identifier_list -> identifier_list COMMA . identifier
    (116) identifier -> . ID

    ID              shift and go to state 16

    identifier                     shift and go to state 172

state 126

    (31) direct_declarator -> direct_declarator LPAREN empty RPAREN .

    LBRACKET        reduce using rule 31 (direct_declarator -> direct_declarator LPAREN empty RPAREN .)
    LPAREN          reduce using rule 31 (direct_declarator -> direct_declarator LPAREN empty RPAREN .)
    VOID            reduce using rule 31 (direct_declarator -> direct_declarator LPAREN empty RPAREN .)
    CHAR            reduce using rule 31 (direct_declarator -> direct_declarator LPAREN empty RPAREN .)
    INT             reduce using rule 31 (direct_declarator -> direct_declarator LPAREN empty RPAREN .)
    FLOAT           reduce using rule 31 (direct_declarator -> direct_declarator LPAREN empty RPAREN .)
    LBRACE          reduce using rule 31 (direct_declarator -> direct_declarator LPAREN empty RPAREN .)
    ASSIGN          reduce using rule 31 (direct_declarator -> direct_declarator LPAREN empty RPAREN .)
    COMMA           reduce using rule 31 (direct_declarator -> direct_declarator LPAREN empty RPAREN .)
    SEMI            reduce using rule 31 (direct_declarator -> direct_declarator LPAREN empty RPAREN .)
    RPAREN          reduce using rule 31 (direct_declarator -> direct_declarator LPAREN empty RPAREN .)


state 127

    (121) parameter_declaration -> type_specifier declarator .

    RPAREN          reduce using rule 121 (parameter_declaration -> type_specifier declarator .)
    COMMA           reduce using rule 121 (parameter_declaration -> type_specifier declarator .)


state 128

    (17) initializer -> LBRACE initializer_list . RBRACE
    (18) initializer -> LBRACE initializer_list . COMMA RBRACE
    (20) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 173
    COMMA           shift and go to state 174


state 129

    (19) initializer_list -> initializer .

    RBRACE          reduce using rule 19 (initializer_list -> initializer .)
    COMMA           reduce using rule 19 (initializer_list -> initializer .)


state 130

    (106) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    unary_expression               shift and go to state 72
    assignment_expression          shift and go to state 175
    binary_expression              shift and go to state 71
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 131

    (107) assignment_operator -> ASSIGN .

    PLUSPLUS        reduce using rule 107 (assignment_operator -> ASSIGN .)
    MINUSMINUS      reduce using rule 107 (assignment_operator -> ASSIGN .)
    LPAREN          reduce using rule 107 (assignment_operator -> ASSIGN .)
    ADDRESS         reduce using rule 107 (assignment_operator -> ASSIGN .)
    TIMES           reduce using rule 107 (assignment_operator -> ASSIGN .)
    PLUS            reduce using rule 107 (assignment_operator -> ASSIGN .)
    MINUS           reduce using rule 107 (assignment_operator -> ASSIGN .)
    NOT             reduce using rule 107 (assignment_operator -> ASSIGN .)
    ID              reduce using rule 107 (assignment_operator -> ASSIGN .)
    INT_CONST       reduce using rule 107 (assignment_operator -> ASSIGN .)
    FLOAT_CONST     reduce using rule 107 (assignment_operator -> ASSIGN .)
    CHAR_CONST      reduce using rule 107 (assignment_operator -> ASSIGN .)
    STRING_CONST    reduce using rule 107 (assignment_operator -> ASSIGN .)


state 132

    (108) assignment_operator -> TIMESASSIGN .

    PLUSPLUS        reduce using rule 108 (assignment_operator -> TIMESASSIGN .)
    MINUSMINUS      reduce using rule 108 (assignment_operator -> TIMESASSIGN .)
    LPAREN          reduce using rule 108 (assignment_operator -> TIMESASSIGN .)
    ADDRESS         reduce using rule 108 (assignment_operator -> TIMESASSIGN .)
    TIMES           reduce using rule 108 (assignment_operator -> TIMESASSIGN .)
    PLUS            reduce using rule 108 (assignment_operator -> TIMESASSIGN .)
    MINUS           reduce using rule 108 (assignment_operator -> TIMESASSIGN .)
    NOT             reduce using rule 108 (assignment_operator -> TIMESASSIGN .)
    ID              reduce using rule 108 (assignment_operator -> TIMESASSIGN .)
    INT_CONST       reduce using rule 108 (assignment_operator -> TIMESASSIGN .)
    FLOAT_CONST     reduce using rule 108 (assignment_operator -> TIMESASSIGN .)
    CHAR_CONST      reduce using rule 108 (assignment_operator -> TIMESASSIGN .)
    STRING_CONST    reduce using rule 108 (assignment_operator -> TIMESASSIGN .)


state 133

    (109) assignment_operator -> DIVIDEASSIGN .

    PLUSPLUS        reduce using rule 109 (assignment_operator -> DIVIDEASSIGN .)
    MINUSMINUS      reduce using rule 109 (assignment_operator -> DIVIDEASSIGN .)
    LPAREN          reduce using rule 109 (assignment_operator -> DIVIDEASSIGN .)
    ADDRESS         reduce using rule 109 (assignment_operator -> DIVIDEASSIGN .)
    TIMES           reduce using rule 109 (assignment_operator -> DIVIDEASSIGN .)
    PLUS            reduce using rule 109 (assignment_operator -> DIVIDEASSIGN .)
    MINUS           reduce using rule 109 (assignment_operator -> DIVIDEASSIGN .)
    NOT             reduce using rule 109 (assignment_operator -> DIVIDEASSIGN .)
    ID              reduce using rule 109 (assignment_operator -> DIVIDEASSIGN .)
    INT_CONST       reduce using rule 109 (assignment_operator -> DIVIDEASSIGN .)
    FLOAT_CONST     reduce using rule 109 (assignment_operator -> DIVIDEASSIGN .)
    CHAR_CONST      reduce using rule 109 (assignment_operator -> DIVIDEASSIGN .)
    STRING_CONST    reduce using rule 109 (assignment_operator -> DIVIDEASSIGN .)


state 134

    (110) assignment_operator -> MODASSIGN .

    PLUSPLUS        reduce using rule 110 (assignment_operator -> MODASSIGN .)
    MINUSMINUS      reduce using rule 110 (assignment_operator -> MODASSIGN .)
    LPAREN          reduce using rule 110 (assignment_operator -> MODASSIGN .)
    ADDRESS         reduce using rule 110 (assignment_operator -> MODASSIGN .)
    TIMES           reduce using rule 110 (assignment_operator -> MODASSIGN .)
    PLUS            reduce using rule 110 (assignment_operator -> MODASSIGN .)
    MINUS           reduce using rule 110 (assignment_operator -> MODASSIGN .)
    NOT             reduce using rule 110 (assignment_operator -> MODASSIGN .)
    ID              reduce using rule 110 (assignment_operator -> MODASSIGN .)
    INT_CONST       reduce using rule 110 (assignment_operator -> MODASSIGN .)
    FLOAT_CONST     reduce using rule 110 (assignment_operator -> MODASSIGN .)
    CHAR_CONST      reduce using rule 110 (assignment_operator -> MODASSIGN .)
    STRING_CONST    reduce using rule 110 (assignment_operator -> MODASSIGN .)


state 135

    (111) assignment_operator -> PLUSASSIGN .

    PLUSPLUS        reduce using rule 111 (assignment_operator -> PLUSASSIGN .)
    MINUSMINUS      reduce using rule 111 (assignment_operator -> PLUSASSIGN .)
    LPAREN          reduce using rule 111 (assignment_operator -> PLUSASSIGN .)
    ADDRESS         reduce using rule 111 (assignment_operator -> PLUSASSIGN .)
    TIMES           reduce using rule 111 (assignment_operator -> PLUSASSIGN .)
    PLUS            reduce using rule 111 (assignment_operator -> PLUSASSIGN .)
    MINUS           reduce using rule 111 (assignment_operator -> PLUSASSIGN .)
    NOT             reduce using rule 111 (assignment_operator -> PLUSASSIGN .)
    ID              reduce using rule 111 (assignment_operator -> PLUSASSIGN .)
    INT_CONST       reduce using rule 111 (assignment_operator -> PLUSASSIGN .)
    FLOAT_CONST     reduce using rule 111 (assignment_operator -> PLUSASSIGN .)
    CHAR_CONST      reduce using rule 111 (assignment_operator -> PLUSASSIGN .)
    STRING_CONST    reduce using rule 111 (assignment_operator -> PLUSASSIGN .)


state 136

    (112) assignment_operator -> MINUSASSIGN .

    PLUSPLUS        reduce using rule 112 (assignment_operator -> MINUSASSIGN .)
    MINUSMINUS      reduce using rule 112 (assignment_operator -> MINUSASSIGN .)
    LPAREN          reduce using rule 112 (assignment_operator -> MINUSASSIGN .)
    ADDRESS         reduce using rule 112 (assignment_operator -> MINUSASSIGN .)
    TIMES           reduce using rule 112 (assignment_operator -> MINUSASSIGN .)
    PLUS            reduce using rule 112 (assignment_operator -> MINUSASSIGN .)
    MINUS           reduce using rule 112 (assignment_operator -> MINUSASSIGN .)
    NOT             reduce using rule 112 (assignment_operator -> MINUSASSIGN .)
    ID              reduce using rule 112 (assignment_operator -> MINUSASSIGN .)
    INT_CONST       reduce using rule 112 (assignment_operator -> MINUSASSIGN .)
    FLOAT_CONST     reduce using rule 112 (assignment_operator -> MINUSASSIGN .)
    CHAR_CONST      reduce using rule 112 (assignment_operator -> MINUSASSIGN .)
    STRING_CONST    reduce using rule 112 (assignment_operator -> MINUSASSIGN .)


state 137

    (37) compound_statement -> LBRACE block_item_list RBRACE .

    VOID            reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    CHAR            reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    INT             reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    FLOAT           reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    LPAREN          reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    ID              reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    $end            reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    RBRACE          reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    IF              reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    LBRACE          reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    WHILE           reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    FOR             reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    BREAK           reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    RETURN          reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    ASSERT          reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    PRINT           reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    READ            reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    PLUSPLUS        reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    MINUSMINUS      reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    ADDRESS         reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    TIMES           reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    PLUS            reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    MINUS           reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    NOT             reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    INT_CONST       reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    FLOAT_CONST     reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    CHAR_CONST      reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    STRING_CONST    reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    SEMI            reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)
    ELSE            reduce using rule 37 (compound_statement -> LBRACE block_item_list RBRACE .)


state 138

    (36) block_item_list -> block_item_list block_item .

    RBRACE          reduce using rule 36 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 36 (block_item_list -> block_item_list block_item .)
    LBRACE          reduce using rule 36 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 36 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 36 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 36 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 36 (block_item_list -> block_item_list block_item .)
    ASSERT          reduce using rule 36 (block_item_list -> block_item_list block_item .)
    PRINT           reduce using rule 36 (block_item_list -> block_item_list block_item .)
    READ            reduce using rule 36 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 36 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 36 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 36 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 36 (block_item_list -> block_item_list block_item .)
    PLUSPLUS        reduce using rule 36 (block_item_list -> block_item_list block_item .)
    MINUSMINUS      reduce using rule 36 (block_item_list -> block_item_list block_item .)
    LPAREN          reduce using rule 36 (block_item_list -> block_item_list block_item .)
    ADDRESS         reduce using rule 36 (block_item_list -> block_item_list block_item .)
    TIMES           reduce using rule 36 (block_item_list -> block_item_list block_item .)
    PLUS            reduce using rule 36 (block_item_list -> block_item_list block_item .)
    MINUS           reduce using rule 36 (block_item_list -> block_item_list block_item .)
    NOT             reduce using rule 36 (block_item_list -> block_item_list block_item .)
    ID              reduce using rule 36 (block_item_list -> block_item_list block_item .)
    INT_CONST       reduce using rule 36 (block_item_list -> block_item_list block_item .)
    FLOAT_CONST     reduce using rule 36 (block_item_list -> block_item_list block_item .)
    CHAR_CONST      reduce using rule 36 (block_item_list -> block_item_list block_item .)
    STRING_CONST    reduce using rule 36 (block_item_list -> block_item_list block_item .)
    SEMI            reduce using rule 36 (block_item_list -> block_item_list block_item .)


state 139

    (44) expression_statement -> empty SEMI .

    RBRACE          reduce using rule 44 (expression_statement -> empty SEMI .)
    IF              reduce using rule 44 (expression_statement -> empty SEMI .)
    LBRACE          reduce using rule 44 (expression_statement -> empty SEMI .)
    WHILE           reduce using rule 44 (expression_statement -> empty SEMI .)
    FOR             reduce using rule 44 (expression_statement -> empty SEMI .)
    BREAK           reduce using rule 44 (expression_statement -> empty SEMI .)
    RETURN          reduce using rule 44 (expression_statement -> empty SEMI .)
    ASSERT          reduce using rule 44 (expression_statement -> empty SEMI .)
    PRINT           reduce using rule 44 (expression_statement -> empty SEMI .)
    READ            reduce using rule 44 (expression_statement -> empty SEMI .)
    VOID            reduce using rule 44 (expression_statement -> empty SEMI .)
    CHAR            reduce using rule 44 (expression_statement -> empty SEMI .)
    INT             reduce using rule 44 (expression_statement -> empty SEMI .)
    FLOAT           reduce using rule 44 (expression_statement -> empty SEMI .)
    PLUSPLUS        reduce using rule 44 (expression_statement -> empty SEMI .)
    MINUSMINUS      reduce using rule 44 (expression_statement -> empty SEMI .)
    LPAREN          reduce using rule 44 (expression_statement -> empty SEMI .)
    ADDRESS         reduce using rule 44 (expression_statement -> empty SEMI .)
    TIMES           reduce using rule 44 (expression_statement -> empty SEMI .)
    PLUS            reduce using rule 44 (expression_statement -> empty SEMI .)
    MINUS           reduce using rule 44 (expression_statement -> empty SEMI .)
    NOT             reduce using rule 44 (expression_statement -> empty SEMI .)
    ID              reduce using rule 44 (expression_statement -> empty SEMI .)
    INT_CONST       reduce using rule 44 (expression_statement -> empty SEMI .)
    FLOAT_CONST     reduce using rule 44 (expression_statement -> empty SEMI .)
    CHAR_CONST      reduce using rule 44 (expression_statement -> empty SEMI .)
    STRING_CONST    reduce using rule 44 (expression_statement -> empty SEMI .)
    SEMI            reduce using rule 44 (expression_statement -> empty SEMI .)
    ELSE            reduce using rule 44 (expression_statement -> empty SEMI .)


state 140

    (43) expression_statement -> expression SEMI .

    RBRACE          reduce using rule 43 (expression_statement -> expression SEMI .)
    IF              reduce using rule 43 (expression_statement -> expression SEMI .)
    LBRACE          reduce using rule 43 (expression_statement -> expression SEMI .)
    WHILE           reduce using rule 43 (expression_statement -> expression SEMI .)
    FOR             reduce using rule 43 (expression_statement -> expression SEMI .)
    BREAK           reduce using rule 43 (expression_statement -> expression SEMI .)
    RETURN          reduce using rule 43 (expression_statement -> expression SEMI .)
    ASSERT          reduce using rule 43 (expression_statement -> expression SEMI .)
    PRINT           reduce using rule 43 (expression_statement -> expression SEMI .)
    READ            reduce using rule 43 (expression_statement -> expression SEMI .)
    VOID            reduce using rule 43 (expression_statement -> expression SEMI .)
    CHAR            reduce using rule 43 (expression_statement -> expression SEMI .)
    INT             reduce using rule 43 (expression_statement -> expression SEMI .)
    FLOAT           reduce using rule 43 (expression_statement -> expression SEMI .)
    PLUSPLUS        reduce using rule 43 (expression_statement -> expression SEMI .)
    MINUSMINUS      reduce using rule 43 (expression_statement -> expression SEMI .)
    LPAREN          reduce using rule 43 (expression_statement -> expression SEMI .)
    ADDRESS         reduce using rule 43 (expression_statement -> expression SEMI .)
    TIMES           reduce using rule 43 (expression_statement -> expression SEMI .)
    PLUS            reduce using rule 43 (expression_statement -> expression SEMI .)
    MINUS           reduce using rule 43 (expression_statement -> expression SEMI .)
    NOT             reduce using rule 43 (expression_statement -> expression SEMI .)
    ID              reduce using rule 43 (expression_statement -> expression SEMI .)
    INT_CONST       reduce using rule 43 (expression_statement -> expression SEMI .)
    FLOAT_CONST     reduce using rule 43 (expression_statement -> expression SEMI .)
    CHAR_CONST      reduce using rule 43 (expression_statement -> expression SEMI .)
    STRING_CONST    reduce using rule 43 (expression_statement -> expression SEMI .)
    SEMI            reduce using rule 43 (expression_statement -> expression SEMI .)
    ELSE            reduce using rule 43 (expression_statement -> expression SEMI .)


state 141

    (100) expression -> expression COMMA . assignment_expression
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    assignment_expression          shift and go to state 176
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 142

    (38) selection_statement -> IF LPAREN . expression RPAREN statement
    (39) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (99) expression -> . assignment_expression
    (100) expression -> . expression COMMA assignment_expression
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    expression                     shift and go to state 177
    assignment_expression          shift and go to state 96
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 143

    (40) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (99) expression -> . assignment_expression
    (100) expression -> . expression COMMA assignment_expression
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    expression                     shift and go to state 178
    assignment_expression          shift and go to state 96
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 144

    (41) iteration_statement -> FOR LPAREN . expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (42) iteration_statement -> FOR LPAREN . declaration expression_opt SEMI expression_opt RPAREN statement
    (101) expression_opt -> . expression
    (102) expression_opt -> . empty
    (9) declaration -> . decl_body SEMI
    (99) expression -> . assignment_expression
    (100) expression -> . expression COMMA assignment_expression
    (59) empty -> .
    (10) decl_body -> . type_specifier init_declarator_list
    (11) decl_body -> . type_specifier empty
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (60) type_specifier -> . VOID
    (61) type_specifier -> . CHAR
    (62) type_specifier -> . INT
    (63) type_specifier -> . FLOAT
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    SEMI            reduce using rule 59 (empty -> .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    FLOAT           shift and go to state 12
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    expression_opt                 shift and go to state 179
    declaration                    shift and go to state 180
    expression                     shift and go to state 147
    empty                          shift and go to state 148
    decl_body                      shift and go to state 6
    assignment_expression          shift and go to state 96
    type_specifier                 shift and go to state 27
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 145

    (49) jump_statement -> BREAK SEMI .

    RBRACE          reduce using rule 49 (jump_statement -> BREAK SEMI .)
    IF              reduce using rule 49 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 49 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 49 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 49 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 49 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 49 (jump_statement -> BREAK SEMI .)
    ASSERT          reduce using rule 49 (jump_statement -> BREAK SEMI .)
    PRINT           reduce using rule 49 (jump_statement -> BREAK SEMI .)
    READ            reduce using rule 49 (jump_statement -> BREAK SEMI .)
    VOID            reduce using rule 49 (jump_statement -> BREAK SEMI .)
    CHAR            reduce using rule 49 (jump_statement -> BREAK SEMI .)
    INT             reduce using rule 49 (jump_statement -> BREAK SEMI .)
    FLOAT           reduce using rule 49 (jump_statement -> BREAK SEMI .)
    PLUSPLUS        reduce using rule 49 (jump_statement -> BREAK SEMI .)
    MINUSMINUS      reduce using rule 49 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 49 (jump_statement -> BREAK SEMI .)
    ADDRESS         reduce using rule 49 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 49 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 49 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 49 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 49 (jump_statement -> BREAK SEMI .)
    ID              reduce using rule 49 (jump_statement -> BREAK SEMI .)
    INT_CONST       reduce using rule 49 (jump_statement -> BREAK SEMI .)
    FLOAT_CONST     reduce using rule 49 (jump_statement -> BREAK SEMI .)
    CHAR_CONST      reduce using rule 49 (jump_statement -> BREAK SEMI .)
    STRING_CONST    reduce using rule 49 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 49 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 49 (jump_statement -> BREAK SEMI .)


state 146

    (50) jump_statement -> RETURN expression_opt . SEMI

    SEMI            shift and go to state 181


state 147

    (101) expression_opt -> expression .
    (100) expression -> expression . COMMA assignment_expression

    SEMI            reduce using rule 101 (expression_opt -> expression .)
    RPAREN          reduce using rule 101 (expression_opt -> expression .)
    COMMA           shift and go to state 141


state 148

    (102) expression_opt -> empty .

    SEMI            reduce using rule 102 (expression_opt -> empty .)
    RPAREN          reduce using rule 102 (expression_opt -> empty .)


state 149

    (45) assert_statement -> ASSERT expression . SEMI
    (100) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 182
    COMMA           shift and go to state 141


state 150

    (46) print_statement -> PRINT LPAREN . expression RPAREN SEMI
    (47) print_statement -> PRINT LPAREN . empty RPAREN SEMI
    (99) expression -> . assignment_expression
    (100) expression -> . expression COMMA assignment_expression
    (59) empty -> .
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    RPAREN          reduce using rule 59 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    expression                     shift and go to state 183
    empty                          shift and go to state 184
    assignment_expression          shift and go to state 96
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 151

    (48) read_statement -> READ LPAREN . argument_expression RPAREN SEMI
    (103) argument_expression -> . assignment_expression
    (104) argument_expression -> . argument_expression COMMA assignment_expression
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    argument_expression            shift and go to state 185
    assignment_expression          shift and go to state 170
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 152

    (65) binary_expression -> binary_expression TIMES binary_expression .
    (65) binary_expression -> binary_expression . TIMES binary_expression
    (66) binary_expression -> binary_expression . DIVIDE binary_expression
    (67) binary_expression -> binary_expression . MOD binary_expression
    (68) binary_expression -> binary_expression . PLUS binary_expression
    (69) binary_expression -> binary_expression . MINUS binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LTE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GTE binary_expression
    (74) binary_expression -> binary_expression . EQUALS binary_expression
    (75) binary_expression -> binary_expression . NE binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 65 (binary_expression -> binary_expression TIMES binary_expression .)
    DIVIDE          reduce using rule 65 (binary_expression -> binary_expression TIMES binary_expression .)
    MOD             reduce using rule 65 (binary_expression -> binary_expression TIMES binary_expression .)
    PLUS            reduce using rule 65 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS           reduce using rule 65 (binary_expression -> binary_expression TIMES binary_expression .)
    LT              reduce using rule 65 (binary_expression -> binary_expression TIMES binary_expression .)
    LTE             reduce using rule 65 (binary_expression -> binary_expression TIMES binary_expression .)
    GT              reduce using rule 65 (binary_expression -> binary_expression TIMES binary_expression .)
    GTE             reduce using rule 65 (binary_expression -> binary_expression TIMES binary_expression .)
    EQUALS          reduce using rule 65 (binary_expression -> binary_expression TIMES binary_expression .)
    NE              reduce using rule 65 (binary_expression -> binary_expression TIMES binary_expression .)
    AND             reduce using rule 65 (binary_expression -> binary_expression TIMES binary_expression .)
    OR              reduce using rule 65 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACKET        reduce using rule 65 (binary_expression -> binary_expression TIMES binary_expression .)
    COMMA           reduce using rule 65 (binary_expression -> binary_expression TIMES binary_expression .)
    SEMI            reduce using rule 65 (binary_expression -> binary_expression TIMES binary_expression .)
    RPAREN          reduce using rule 65 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACE          reduce using rule 65 (binary_expression -> binary_expression TIMES binary_expression .)

  ! TIMES           [ shift and go to state 99 ]
  ! DIVIDE          [ shift and go to state 100 ]
  ! MOD             [ shift and go to state 101 ]
  ! PLUS            [ shift and go to state 102 ]
  ! MINUS           [ shift and go to state 103 ]
  ! LT              [ shift and go to state 104 ]
  ! LTE             [ shift and go to state 105 ]
  ! GT              [ shift and go to state 106 ]
  ! GTE             [ shift and go to state 107 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! NE              [ shift and go to state 109 ]
  ! AND             [ shift and go to state 110 ]
  ! OR              [ shift and go to state 111 ]


state 153

    (66) binary_expression -> binary_expression DIVIDE binary_expression .
    (65) binary_expression -> binary_expression . TIMES binary_expression
    (66) binary_expression -> binary_expression . DIVIDE binary_expression
    (67) binary_expression -> binary_expression . MOD binary_expression
    (68) binary_expression -> binary_expression . PLUS binary_expression
    (69) binary_expression -> binary_expression . MINUS binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LTE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GTE binary_expression
    (74) binary_expression -> binary_expression . EQUALS binary_expression
    (75) binary_expression -> binary_expression . NE binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 66 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIVIDE          reduce using rule 66 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MOD             reduce using rule 66 (binary_expression -> binary_expression DIVIDE binary_expression .)
    PLUS            reduce using rule 66 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MINUS           reduce using rule 66 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LT              reduce using rule 66 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LTE             reduce using rule 66 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GT              reduce using rule 66 (binary_expression -> binary_expression DIVIDE binary_expression .)
    GTE             reduce using rule 66 (binary_expression -> binary_expression DIVIDE binary_expression .)
    EQUALS          reduce using rule 66 (binary_expression -> binary_expression DIVIDE binary_expression .)
    NE              reduce using rule 66 (binary_expression -> binary_expression DIVIDE binary_expression .)
    AND             reduce using rule 66 (binary_expression -> binary_expression DIVIDE binary_expression .)
    OR              reduce using rule 66 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACKET        reduce using rule 66 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COMMA           reduce using rule 66 (binary_expression -> binary_expression DIVIDE binary_expression .)
    SEMI            reduce using rule 66 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RPAREN          reduce using rule 66 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACE          reduce using rule 66 (binary_expression -> binary_expression DIVIDE binary_expression .)

  ! TIMES           [ shift and go to state 99 ]
  ! DIVIDE          [ shift and go to state 100 ]
  ! MOD             [ shift and go to state 101 ]
  ! PLUS            [ shift and go to state 102 ]
  ! MINUS           [ shift and go to state 103 ]
  ! LT              [ shift and go to state 104 ]
  ! LTE             [ shift and go to state 105 ]
  ! GT              [ shift and go to state 106 ]
  ! GTE             [ shift and go to state 107 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! NE              [ shift and go to state 109 ]
  ! AND             [ shift and go to state 110 ]
  ! OR              [ shift and go to state 111 ]


state 154

    (67) binary_expression -> binary_expression MOD binary_expression .
    (65) binary_expression -> binary_expression . TIMES binary_expression
    (66) binary_expression -> binary_expression . DIVIDE binary_expression
    (67) binary_expression -> binary_expression . MOD binary_expression
    (68) binary_expression -> binary_expression . PLUS binary_expression
    (69) binary_expression -> binary_expression . MINUS binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LTE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GTE binary_expression
    (74) binary_expression -> binary_expression . EQUALS binary_expression
    (75) binary_expression -> binary_expression . NE binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 67 (binary_expression -> binary_expression MOD binary_expression .)
    DIVIDE          reduce using rule 67 (binary_expression -> binary_expression MOD binary_expression .)
    MOD             reduce using rule 67 (binary_expression -> binary_expression MOD binary_expression .)
    PLUS            reduce using rule 67 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS           reduce using rule 67 (binary_expression -> binary_expression MOD binary_expression .)
    LT              reduce using rule 67 (binary_expression -> binary_expression MOD binary_expression .)
    LTE             reduce using rule 67 (binary_expression -> binary_expression MOD binary_expression .)
    GT              reduce using rule 67 (binary_expression -> binary_expression MOD binary_expression .)
    GTE             reduce using rule 67 (binary_expression -> binary_expression MOD binary_expression .)
    EQUALS          reduce using rule 67 (binary_expression -> binary_expression MOD binary_expression .)
    NE              reduce using rule 67 (binary_expression -> binary_expression MOD binary_expression .)
    AND             reduce using rule 67 (binary_expression -> binary_expression MOD binary_expression .)
    OR              reduce using rule 67 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACKET        reduce using rule 67 (binary_expression -> binary_expression MOD binary_expression .)
    COMMA           reduce using rule 67 (binary_expression -> binary_expression MOD binary_expression .)
    SEMI            reduce using rule 67 (binary_expression -> binary_expression MOD binary_expression .)
    RPAREN          reduce using rule 67 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACE          reduce using rule 67 (binary_expression -> binary_expression MOD binary_expression .)

  ! TIMES           [ shift and go to state 99 ]
  ! DIVIDE          [ shift and go to state 100 ]
  ! MOD             [ shift and go to state 101 ]
  ! PLUS            [ shift and go to state 102 ]
  ! MINUS           [ shift and go to state 103 ]
  ! LT              [ shift and go to state 104 ]
  ! LTE             [ shift and go to state 105 ]
  ! GT              [ shift and go to state 106 ]
  ! GTE             [ shift and go to state 107 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! NE              [ shift and go to state 109 ]
  ! AND             [ shift and go to state 110 ]
  ! OR              [ shift and go to state 111 ]


state 155

    (68) binary_expression -> binary_expression PLUS binary_expression .
    (65) binary_expression -> binary_expression . TIMES binary_expression
    (66) binary_expression -> binary_expression . DIVIDE binary_expression
    (67) binary_expression -> binary_expression . MOD binary_expression
    (68) binary_expression -> binary_expression . PLUS binary_expression
    (69) binary_expression -> binary_expression . MINUS binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LTE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GTE binary_expression
    (74) binary_expression -> binary_expression . EQUALS binary_expression
    (75) binary_expression -> binary_expression . NE binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 68 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 68 (binary_expression -> binary_expression PLUS binary_expression .)
    LT              reduce using rule 68 (binary_expression -> binary_expression PLUS binary_expression .)
    LTE             reduce using rule 68 (binary_expression -> binary_expression PLUS binary_expression .)
    GT              reduce using rule 68 (binary_expression -> binary_expression PLUS binary_expression .)
    GTE             reduce using rule 68 (binary_expression -> binary_expression PLUS binary_expression .)
    EQUALS          reduce using rule 68 (binary_expression -> binary_expression PLUS binary_expression .)
    NE              reduce using rule 68 (binary_expression -> binary_expression PLUS binary_expression .)
    AND             reduce using rule 68 (binary_expression -> binary_expression PLUS binary_expression .)
    OR              reduce using rule 68 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACKET        reduce using rule 68 (binary_expression -> binary_expression PLUS binary_expression .)
    COMMA           reduce using rule 68 (binary_expression -> binary_expression PLUS binary_expression .)
    SEMI            reduce using rule 68 (binary_expression -> binary_expression PLUS binary_expression .)
    RPAREN          reduce using rule 68 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACE          reduce using rule 68 (binary_expression -> binary_expression PLUS binary_expression .)
    TIMES           shift and go to state 99
    DIVIDE          shift and go to state 100
    MOD             shift and go to state 101

  ! TIMES           [ reduce using rule 68 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 68 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! MOD             [ reduce using rule 68 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! PLUS            [ shift and go to state 102 ]
  ! MINUS           [ shift and go to state 103 ]
  ! LT              [ shift and go to state 104 ]
  ! LTE             [ shift and go to state 105 ]
  ! GT              [ shift and go to state 106 ]
  ! GTE             [ shift and go to state 107 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! NE              [ shift and go to state 109 ]
  ! AND             [ shift and go to state 110 ]
  ! OR              [ shift and go to state 111 ]


state 156

    (69) binary_expression -> binary_expression MINUS binary_expression .
    (65) binary_expression -> binary_expression . TIMES binary_expression
    (66) binary_expression -> binary_expression . DIVIDE binary_expression
    (67) binary_expression -> binary_expression . MOD binary_expression
    (68) binary_expression -> binary_expression . PLUS binary_expression
    (69) binary_expression -> binary_expression . MINUS binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LTE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GTE binary_expression
    (74) binary_expression -> binary_expression . EQUALS binary_expression
    (75) binary_expression -> binary_expression . NE binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 69 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 69 (binary_expression -> binary_expression MINUS binary_expression .)
    LT              reduce using rule 69 (binary_expression -> binary_expression MINUS binary_expression .)
    LTE             reduce using rule 69 (binary_expression -> binary_expression MINUS binary_expression .)
    GT              reduce using rule 69 (binary_expression -> binary_expression MINUS binary_expression .)
    GTE             reduce using rule 69 (binary_expression -> binary_expression MINUS binary_expression .)
    EQUALS          reduce using rule 69 (binary_expression -> binary_expression MINUS binary_expression .)
    NE              reduce using rule 69 (binary_expression -> binary_expression MINUS binary_expression .)
    AND             reduce using rule 69 (binary_expression -> binary_expression MINUS binary_expression .)
    OR              reduce using rule 69 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACKET        reduce using rule 69 (binary_expression -> binary_expression MINUS binary_expression .)
    COMMA           reduce using rule 69 (binary_expression -> binary_expression MINUS binary_expression .)
    SEMI            reduce using rule 69 (binary_expression -> binary_expression MINUS binary_expression .)
    RPAREN          reduce using rule 69 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACE          reduce using rule 69 (binary_expression -> binary_expression MINUS binary_expression .)
    TIMES           shift and go to state 99
    DIVIDE          shift and go to state 100
    MOD             shift and go to state 101

  ! TIMES           [ reduce using rule 69 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 69 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! MOD             [ reduce using rule 69 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! PLUS            [ shift and go to state 102 ]
  ! MINUS           [ shift and go to state 103 ]
  ! LT              [ shift and go to state 104 ]
  ! LTE             [ shift and go to state 105 ]
  ! GT              [ shift and go to state 106 ]
  ! GTE             [ shift and go to state 107 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! NE              [ shift and go to state 109 ]
  ! AND             [ shift and go to state 110 ]
  ! OR              [ shift and go to state 111 ]


state 157

    (70) binary_expression -> binary_expression LT binary_expression .
    (65) binary_expression -> binary_expression . TIMES binary_expression
    (66) binary_expression -> binary_expression . DIVIDE binary_expression
    (67) binary_expression -> binary_expression . MOD binary_expression
    (68) binary_expression -> binary_expression . PLUS binary_expression
    (69) binary_expression -> binary_expression . MINUS binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LTE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GTE binary_expression
    (74) binary_expression -> binary_expression . EQUALS binary_expression
    (75) binary_expression -> binary_expression . NE binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    LTE             reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    GT              reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    GTE             reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    EQUALS          reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    NE              reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    AND             reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    OR              reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    RBRACKET        reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    COMMA           reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    SEMI            reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    RPAREN          reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    RBRACE          reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .)
    TIMES           shift and go to state 99
    DIVIDE          shift and go to state 100
    MOD             shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103

  ! TIMES           [ reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MOD             [ reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .) ]
  ! PLUS            [ reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MINUS           [ reduce using rule 70 (binary_expression -> binary_expression LT binary_expression .) ]
  ! LT              [ shift and go to state 104 ]
  ! LTE             [ shift and go to state 105 ]
  ! GT              [ shift and go to state 106 ]
  ! GTE             [ shift and go to state 107 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! NE              [ shift and go to state 109 ]
  ! AND             [ shift and go to state 110 ]
  ! OR              [ shift and go to state 111 ]


state 158

    (71) binary_expression -> binary_expression LTE binary_expression .
    (65) binary_expression -> binary_expression . TIMES binary_expression
    (66) binary_expression -> binary_expression . DIVIDE binary_expression
    (67) binary_expression -> binary_expression . MOD binary_expression
    (68) binary_expression -> binary_expression . PLUS binary_expression
    (69) binary_expression -> binary_expression . MINUS binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LTE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GTE binary_expression
    (74) binary_expression -> binary_expression . EQUALS binary_expression
    (75) binary_expression -> binary_expression . NE binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 71 (binary_expression -> binary_expression LTE binary_expression .)
    LTE             reduce using rule 71 (binary_expression -> binary_expression LTE binary_expression .)
    GT              reduce using rule 71 (binary_expression -> binary_expression LTE binary_expression .)
    GTE             reduce using rule 71 (binary_expression -> binary_expression LTE binary_expression .)
    EQUALS          reduce using rule 71 (binary_expression -> binary_expression LTE binary_expression .)
    NE              reduce using rule 71 (binary_expression -> binary_expression LTE binary_expression .)
    AND             reduce using rule 71 (binary_expression -> binary_expression LTE binary_expression .)
    OR              reduce using rule 71 (binary_expression -> binary_expression LTE binary_expression .)
    RBRACKET        reduce using rule 71 (binary_expression -> binary_expression LTE binary_expression .)
    COMMA           reduce using rule 71 (binary_expression -> binary_expression LTE binary_expression .)
    SEMI            reduce using rule 71 (binary_expression -> binary_expression LTE binary_expression .)
    RPAREN          reduce using rule 71 (binary_expression -> binary_expression LTE binary_expression .)
    RBRACE          reduce using rule 71 (binary_expression -> binary_expression LTE binary_expression .)
    TIMES           shift and go to state 99
    DIVIDE          shift and go to state 100
    MOD             shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103

  ! TIMES           [ reduce using rule 71 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 71 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! MOD             [ reduce using rule 71 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! PLUS            [ reduce using rule 71 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! MINUS           [ reduce using rule 71 (binary_expression -> binary_expression LTE binary_expression .) ]
  ! LT              [ shift and go to state 104 ]
  ! LTE             [ shift and go to state 105 ]
  ! GT              [ shift and go to state 106 ]
  ! GTE             [ shift and go to state 107 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! NE              [ shift and go to state 109 ]
  ! AND             [ shift and go to state 110 ]
  ! OR              [ shift and go to state 111 ]


state 159

    (72) binary_expression -> binary_expression GT binary_expression .
    (65) binary_expression -> binary_expression . TIMES binary_expression
    (66) binary_expression -> binary_expression . DIVIDE binary_expression
    (67) binary_expression -> binary_expression . MOD binary_expression
    (68) binary_expression -> binary_expression . PLUS binary_expression
    (69) binary_expression -> binary_expression . MINUS binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LTE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GTE binary_expression
    (74) binary_expression -> binary_expression . EQUALS binary_expression
    (75) binary_expression -> binary_expression . NE binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    LTE             reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    GT              reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    GTE             reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    EQUALS          reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    NE              reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    AND             reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    OR              reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    RBRACKET        reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    COMMA           reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    SEMI            reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    RPAREN          reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    RBRACE          reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .)
    TIMES           shift and go to state 99
    DIVIDE          shift and go to state 100
    MOD             shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103

  ! TIMES           [ reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MOD             [ reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .) ]
  ! PLUS            [ reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .) ]
  ! MINUS           [ reduce using rule 72 (binary_expression -> binary_expression GT binary_expression .) ]
  ! LT              [ shift and go to state 104 ]
  ! LTE             [ shift and go to state 105 ]
  ! GT              [ shift and go to state 106 ]
  ! GTE             [ shift and go to state 107 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! NE              [ shift and go to state 109 ]
  ! AND             [ shift and go to state 110 ]
  ! OR              [ shift and go to state 111 ]


state 160

    (73) binary_expression -> binary_expression GTE binary_expression .
    (65) binary_expression -> binary_expression . TIMES binary_expression
    (66) binary_expression -> binary_expression . DIVIDE binary_expression
    (67) binary_expression -> binary_expression . MOD binary_expression
    (68) binary_expression -> binary_expression . PLUS binary_expression
    (69) binary_expression -> binary_expression . MINUS binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LTE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GTE binary_expression
    (74) binary_expression -> binary_expression . EQUALS binary_expression
    (75) binary_expression -> binary_expression . NE binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 73 (binary_expression -> binary_expression GTE binary_expression .)
    LTE             reduce using rule 73 (binary_expression -> binary_expression GTE binary_expression .)
    GT              reduce using rule 73 (binary_expression -> binary_expression GTE binary_expression .)
    GTE             reduce using rule 73 (binary_expression -> binary_expression GTE binary_expression .)
    EQUALS          reduce using rule 73 (binary_expression -> binary_expression GTE binary_expression .)
    NE              reduce using rule 73 (binary_expression -> binary_expression GTE binary_expression .)
    AND             reduce using rule 73 (binary_expression -> binary_expression GTE binary_expression .)
    OR              reduce using rule 73 (binary_expression -> binary_expression GTE binary_expression .)
    RBRACKET        reduce using rule 73 (binary_expression -> binary_expression GTE binary_expression .)
    COMMA           reduce using rule 73 (binary_expression -> binary_expression GTE binary_expression .)
    SEMI            reduce using rule 73 (binary_expression -> binary_expression GTE binary_expression .)
    RPAREN          reduce using rule 73 (binary_expression -> binary_expression GTE binary_expression .)
    RBRACE          reduce using rule 73 (binary_expression -> binary_expression GTE binary_expression .)
    TIMES           shift and go to state 99
    DIVIDE          shift and go to state 100
    MOD             shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103

  ! TIMES           [ reduce using rule 73 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 73 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! MOD             [ reduce using rule 73 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! PLUS            [ reduce using rule 73 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! MINUS           [ reduce using rule 73 (binary_expression -> binary_expression GTE binary_expression .) ]
  ! LT              [ shift and go to state 104 ]
  ! LTE             [ shift and go to state 105 ]
  ! GT              [ shift and go to state 106 ]
  ! GTE             [ shift and go to state 107 ]
  ! EQUALS          [ shift and go to state 108 ]
  ! NE              [ shift and go to state 109 ]
  ! AND             [ shift and go to state 110 ]
  ! OR              [ shift and go to state 111 ]


state 161

    (74) binary_expression -> binary_expression EQUALS binary_expression .
    (65) binary_expression -> binary_expression . TIMES binary_expression
    (66) binary_expression -> binary_expression . DIVIDE binary_expression
    (67) binary_expression -> binary_expression . MOD binary_expression
    (68) binary_expression -> binary_expression . PLUS binary_expression
    (69) binary_expression -> binary_expression . MINUS binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LTE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GTE binary_expression
    (74) binary_expression -> binary_expression . EQUALS binary_expression
    (75) binary_expression -> binary_expression . NE binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    EQUALS          reduce using rule 74 (binary_expression -> binary_expression EQUALS binary_expression .)
    NE              reduce using rule 74 (binary_expression -> binary_expression EQUALS binary_expression .)
    AND             reduce using rule 74 (binary_expression -> binary_expression EQUALS binary_expression .)
    OR              reduce using rule 74 (binary_expression -> binary_expression EQUALS binary_expression .)
    RBRACKET        reduce using rule 74 (binary_expression -> binary_expression EQUALS binary_expression .)
    COMMA           reduce using rule 74 (binary_expression -> binary_expression EQUALS binary_expression .)
    SEMI            reduce using rule 74 (binary_expression -> binary_expression EQUALS binary_expression .)
    RPAREN          reduce using rule 74 (binary_expression -> binary_expression EQUALS binary_expression .)
    RBRACE          reduce using rule 74 (binary_expression -> binary_expression EQUALS binary_expression .)
    TIMES           shift and go to state 99
    DIVIDE          shift and go to state 100
    MOD             shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    LT              shift and go to state 104
    LTE             shift and go to state 105
    GT              shift and go to state 106
    GTE             shift and go to state 107

  ! TIMES           [ reduce using rule 74 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 74 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! MOD             [ reduce using rule 74 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! PLUS            [ reduce using rule 74 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! MINUS           [ reduce using rule 74 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! LT              [ reduce using rule 74 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! LTE             [ reduce using rule 74 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! GT              [ reduce using rule 74 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! GTE             [ reduce using rule 74 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! EQUALS          [ shift and go to state 108 ]
  ! NE              [ shift and go to state 109 ]
  ! AND             [ shift and go to state 110 ]
  ! OR              [ shift and go to state 111 ]


state 162

    (75) binary_expression -> binary_expression NE binary_expression .
    (65) binary_expression -> binary_expression . TIMES binary_expression
    (66) binary_expression -> binary_expression . DIVIDE binary_expression
    (67) binary_expression -> binary_expression . MOD binary_expression
    (68) binary_expression -> binary_expression . PLUS binary_expression
    (69) binary_expression -> binary_expression . MINUS binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LTE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GTE binary_expression
    (74) binary_expression -> binary_expression . EQUALS binary_expression
    (75) binary_expression -> binary_expression . NE binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    EQUALS          reduce using rule 75 (binary_expression -> binary_expression NE binary_expression .)
    NE              reduce using rule 75 (binary_expression -> binary_expression NE binary_expression .)
    AND             reduce using rule 75 (binary_expression -> binary_expression NE binary_expression .)
    OR              reduce using rule 75 (binary_expression -> binary_expression NE binary_expression .)
    RBRACKET        reduce using rule 75 (binary_expression -> binary_expression NE binary_expression .)
    COMMA           reduce using rule 75 (binary_expression -> binary_expression NE binary_expression .)
    SEMI            reduce using rule 75 (binary_expression -> binary_expression NE binary_expression .)
    RPAREN          reduce using rule 75 (binary_expression -> binary_expression NE binary_expression .)
    RBRACE          reduce using rule 75 (binary_expression -> binary_expression NE binary_expression .)
    TIMES           shift and go to state 99
    DIVIDE          shift and go to state 100
    MOD             shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    LT              shift and go to state 104
    LTE             shift and go to state 105
    GT              shift and go to state 106
    GTE             shift and go to state 107

  ! TIMES           [ reduce using rule 75 (binary_expression -> binary_expression NE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 75 (binary_expression -> binary_expression NE binary_expression .) ]
  ! MOD             [ reduce using rule 75 (binary_expression -> binary_expression NE binary_expression .) ]
  ! PLUS            [ reduce using rule 75 (binary_expression -> binary_expression NE binary_expression .) ]
  ! MINUS           [ reduce using rule 75 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LT              [ reduce using rule 75 (binary_expression -> binary_expression NE binary_expression .) ]
  ! LTE             [ reduce using rule 75 (binary_expression -> binary_expression NE binary_expression .) ]
  ! GT              [ reduce using rule 75 (binary_expression -> binary_expression NE binary_expression .) ]
  ! GTE             [ reduce using rule 75 (binary_expression -> binary_expression NE binary_expression .) ]
  ! EQUALS          [ shift and go to state 108 ]
  ! NE              [ shift and go to state 109 ]
  ! AND             [ shift and go to state 110 ]
  ! OR              [ shift and go to state 111 ]


state 163

    (76) binary_expression -> binary_expression AND binary_expression .
    (65) binary_expression -> binary_expression . TIMES binary_expression
    (66) binary_expression -> binary_expression . DIVIDE binary_expression
    (67) binary_expression -> binary_expression . MOD binary_expression
    (68) binary_expression -> binary_expression . PLUS binary_expression
    (69) binary_expression -> binary_expression . MINUS binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LTE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GTE binary_expression
    (74) binary_expression -> binary_expression . EQUALS binary_expression
    (75) binary_expression -> binary_expression . NE binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    AND             reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    OR              reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    RBRACKET        reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    COMMA           reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    SEMI            reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    RPAREN          reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    RBRACE          reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .)
    TIMES           shift and go to state 99
    DIVIDE          shift and go to state 100
    MOD             shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    LT              shift and go to state 104
    LTE             shift and go to state 105
    GT              shift and go to state 106
    GTE             shift and go to state 107
    EQUALS          shift and go to state 108
    NE              shift and go to state 109

  ! TIMES           [ reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MOD             [ reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .) ]
  ! PLUS            [ reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MINUS           [ reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LT              [ reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LTE             [ reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GT              [ reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .) ]
  ! GTE             [ reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .) ]
  ! EQUALS          [ reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .) ]
  ! NE              [ reduce using rule 76 (binary_expression -> binary_expression AND binary_expression .) ]
  ! AND             [ shift and go to state 110 ]
  ! OR              [ shift and go to state 111 ]


state 164

    (77) binary_expression -> binary_expression OR binary_expression .
    (65) binary_expression -> binary_expression . TIMES binary_expression
    (66) binary_expression -> binary_expression . DIVIDE binary_expression
    (67) binary_expression -> binary_expression . MOD binary_expression
    (68) binary_expression -> binary_expression . PLUS binary_expression
    (69) binary_expression -> binary_expression . MINUS binary_expression
    (70) binary_expression -> binary_expression . LT binary_expression
    (71) binary_expression -> binary_expression . LTE binary_expression
    (72) binary_expression -> binary_expression . GT binary_expression
    (73) binary_expression -> binary_expression . GTE binary_expression
    (74) binary_expression -> binary_expression . EQUALS binary_expression
    (75) binary_expression -> binary_expression . NE binary_expression
    (76) binary_expression -> binary_expression . AND binary_expression
    (77) binary_expression -> binary_expression . OR binary_expression

    OR              reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    RBRACKET        reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    COMMA           reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    SEMI            reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    RPAREN          reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    RBRACE          reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .)
    TIMES           shift and go to state 99
    DIVIDE          shift and go to state 100
    MOD             shift and go to state 101
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103
    LT              shift and go to state 104
    LTE             shift and go to state 105
    GT              shift and go to state 106
    GTE             shift and go to state 107
    EQUALS          shift and go to state 108
    NE              shift and go to state 109
    AND             shift and go to state 110

  ! TIMES           [ reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MOD             [ reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .) ]
  ! PLUS            [ reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MINUS           [ reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LT              [ reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LTE             [ reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GT              [ reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .) ]
  ! GTE             [ reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .) ]
  ! EQUALS          [ reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .) ]
  ! NE              [ reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .) ]
  ! AND             [ reduce using rule 77 (binary_expression -> binary_expression OR binary_expression .) ]
  ! OR              [ shift and go to state 111 ]


state 165

    (79) cast_expression -> LPAREN type_specifier RPAREN . cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    LPAREN          shift and go to state 46
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    cast_expression                shift and go to state 186
    unary_expression               shift and go to state 45
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 166

    (115) primary_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    LTE             reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    GTE             reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    TIMESASSIGN     reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDEASSIGN    reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    MODASSIGN       reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    PLUSASSIGN      reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    MINUSASSIGN     reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 115 (primary_expression -> LPAREN expression RPAREN .)


state 167

    (90) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (100) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 187
    COMMA           shift and go to state 141


state 168

    (91) postfix_expression -> postfix_expression LPAREN argument_expression . RPAREN
    (104) argument_expression -> argument_expression . COMMA assignment_expression

    RPAREN          shift and go to state 188
    COMMA           shift and go to state 189


state 169

    (92) postfix_expression -> postfix_expression LPAREN RPAREN .

    LBRACKET        reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LPAREN          reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSPLUS        reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSMINUS      reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMES           reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MOD             reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUS            reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUS           reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LT              reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    LTE             reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GT              reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    GTE             reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    EQUALS          reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    NE              reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    AND             reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    OR              reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACKET        reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    ASSIGN          reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    TIMESASSIGN     reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    DIVIDEASSIGN    reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MODASSIGN       reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    PLUSASSIGN      reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    MINUSASSIGN     reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    COMMA           reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    SEMI            reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 92 (postfix_expression -> postfix_expression LPAREN RPAREN .)


state 170

    (103) argument_expression -> assignment_expression .

    RPAREN          reduce using rule 103 (argument_expression -> assignment_expression .)
    COMMA           reduce using rule 103 (argument_expression -> assignment_expression .)


state 171

    (120) parameter_list -> parameter_list COMMA parameter_declaration .

    RPAREN          reduce using rule 120 (parameter_list -> parameter_list COMMA parameter_declaration .)
    COMMA           reduce using rule 120 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 172

    (118) identifier_list -> identifier_list COMMA identifier .

    RPAREN          reduce using rule 118 (identifier_list -> identifier_list COMMA identifier .)
    COMMA           reduce using rule 118 (identifier_list -> identifier_list COMMA identifier .)


state 173

    (17) initializer -> LBRACE initializer_list RBRACE .

    COMMA           reduce using rule 17 (initializer -> LBRACE initializer_list RBRACE .)
    SEMI            reduce using rule 17 (initializer -> LBRACE initializer_list RBRACE .)
    RBRACE          reduce using rule 17 (initializer -> LBRACE initializer_list RBRACE .)


state 174

    (18) initializer -> LBRACE initializer_list COMMA . RBRACE
    (20) initializer_list -> initializer_list COMMA . initializer
    (16) initializer -> . assignment_expression
    (17) initializer -> . LBRACE initializer_list RBRACE
    (18) initializer -> . LBRACE initializer_list COMMA RBRACE
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    RBRACE          shift and go to state 190
    LBRACE          shift and go to state 70
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    initializer                    shift and go to state 191
    assignment_expression          shift and go to state 69
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 175

    (106) assignment_expression -> unary_expression assignment_operator assignment_expression .

    COMMA           reduce using rule 106 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMI            reduce using rule 106 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 106 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 106 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 106 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 176

    (100) expression -> expression COMMA assignment_expression .

    SEMI            reduce using rule 100 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 100 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 100 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 100 (expression -> expression COMMA assignment_expression .)


state 177

    (38) selection_statement -> IF LPAREN expression . RPAREN statement
    (39) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (100) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 192
    COMMA           shift and go to state 141


state 178

    (40) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (100) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 193
    COMMA           shift and go to state 141


state 179

    (41) iteration_statement -> FOR LPAREN expression_opt . SEMI expression_opt SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 194


state 180

    (42) iteration_statement -> FOR LPAREN declaration . expression_opt SEMI expression_opt RPAREN statement
    (101) expression_opt -> . expression
    (102) expression_opt -> . empty
    (99) expression -> . assignment_expression
    (100) expression -> . expression COMMA assignment_expression
    (59) empty -> .
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    SEMI            reduce using rule 59 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    expression_opt                 shift and go to state 195
    expression                     shift and go to state 147
    empty                          shift and go to state 148
    assignment_expression          shift and go to state 96
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 181

    (50) jump_statement -> RETURN expression_opt SEMI .

    RBRACE          reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    IF              reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    LBRACE          reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    WHILE           reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    FOR             reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    BREAK           reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    RETURN          reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    ASSERT          reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    PRINT           reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    READ            reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    VOID            reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    CHAR            reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    INT             reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    FLOAT           reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    PLUSPLUS        reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    MINUSMINUS      reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    LPAREN          reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    ADDRESS         reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    TIMES           reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    PLUS            reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    MINUS           reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    NOT             reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    ID              reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    INT_CONST       reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    FLOAT_CONST     reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    CHAR_CONST      reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    STRING_CONST    reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    SEMI            reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)
    ELSE            reduce using rule 50 (jump_statement -> RETURN expression_opt SEMI .)


state 182

    (45) assert_statement -> ASSERT expression SEMI .

    RBRACE          reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    IF              reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    LBRACE          reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    WHILE           reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    FOR             reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    BREAK           reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    RETURN          reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    ASSERT          reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    PRINT           reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    READ            reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    VOID            reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    CHAR            reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    INT             reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    FLOAT           reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    PLUSPLUS        reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    MINUSMINUS      reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    LPAREN          reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    ADDRESS         reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    TIMES           reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    PLUS            reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    MINUS           reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    NOT             reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    ID              reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    INT_CONST       reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    FLOAT_CONST     reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    CHAR_CONST      reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    STRING_CONST    reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    SEMI            reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)
    ELSE            reduce using rule 45 (assert_statement -> ASSERT expression SEMI .)


state 183

    (46) print_statement -> PRINT LPAREN expression . RPAREN SEMI
    (100) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 196
    COMMA           shift and go to state 141


state 184

    (47) print_statement -> PRINT LPAREN empty . RPAREN SEMI

    RPAREN          shift and go to state 197


state 185

    (48) read_statement -> READ LPAREN argument_expression . RPAREN SEMI
    (104) argument_expression -> argument_expression . COMMA assignment_expression

    RPAREN          shift and go to state 198
    COMMA           shift and go to state 189


state 186

    (79) cast_expression -> LPAREN type_specifier RPAREN cast_expression .

    TIMES           reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIVIDE          reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MOD             reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUS            reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUS           reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LT              reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LTE             reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    GT              reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    GTE             reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQUALS          reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    NE              reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    AND             reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    OR              reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACKET        reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    COMMA           reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    SEMI            reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RPAREN          reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN          reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    TIMESASSIGN     reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIVIDEASSIGN    reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MODASSIGN       reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUSASSIGN      reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUSASSIGN     reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACE          reduce using rule 79 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)


state 187

    (90) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LTE             reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    GTE             reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    NE              reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ASSIGN          reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMESASSIGN     reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDEASSIGN    reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MODASSIGN       reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUSASSIGN      reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSASSIGN     reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 90 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 188

    (91) postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .

    LBRACKET        reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LPAREN          reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    PLUSPLUS        reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MINUSMINUS      reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    TIMES           reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    DIVIDE          reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MOD             reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    PLUS            reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MINUS           reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LT              reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    LTE             reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    GT              reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    GTE             reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    EQUALS          reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    NE              reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    AND             reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    OR              reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RBRACKET        reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    ASSIGN          reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    TIMESASSIGN     reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    DIVIDEASSIGN    reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MODASSIGN       reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    PLUSASSIGN      reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    MINUSASSIGN     reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    COMMA           reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    SEMI            reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RPAREN          reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)
    RBRACE          reduce using rule 91 (postfix_expression -> postfix_expression LPAREN argument_expression RPAREN .)


state 189

    (104) argument_expression -> argument_expression COMMA . assignment_expression
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    assignment_expression          shift and go to state 199
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 190

    (18) initializer -> LBRACE initializer_list COMMA RBRACE .

    COMMA           reduce using rule 18 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    SEMI            reduce using rule 18 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 18 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 191

    (20) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 20 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 20 (initializer_list -> initializer_list COMMA initializer .)


state 192

    (38) selection_statement -> IF LPAREN expression RPAREN . statement
    (39) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (51) statement -> . expression_statement
    (52) statement -> . selection_statement
    (53) statement -> . compound_statement
    (54) statement -> . iteration_statement
    (55) statement -> . jump_statement
    (56) statement -> . assert_statement
    (57) statement -> . print_statement
    (58) statement -> . read_statement
    (43) expression_statement -> . expression SEMI
    (44) expression_statement -> . empty SEMI
    (38) selection_statement -> . IF LPAREN expression RPAREN statement
    (39) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (37) compound_statement -> . LBRACE block_item_list RBRACE
    (40) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (41) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (42) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (49) jump_statement -> . BREAK SEMI
    (50) jump_statement -> . RETURN expression_opt SEMI
    (45) assert_statement -> . ASSERT expression SEMI
    (46) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (47) print_statement -> . PRINT LPAREN empty RPAREN SEMI
    (48) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (99) expression -> . assignment_expression
    (100) expression -> . expression COMMA assignment_expression
    (59) empty -> .
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    IF              shift and go to state 88
    LBRACE          shift and go to state 35
    WHILE           shift and go to state 89
    FOR             shift and go to state 90
    BREAK           shift and go to state 91
    RETURN          shift and go to state 92
    ASSERT          shift and go to state 93
    PRINT           shift and go to state 94
    READ            shift and go to state 95
    SEMI            reduce using rule 59 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    expression                     shift and go to state 87
    statement                      shift and go to state 200
    expression_statement           shift and go to state 78
    selection_statement            shift and go to state 79
    compound_statement             shift and go to state 80
    iteration_statement            shift and go to state 81
    jump_statement                 shift and go to state 82
    assert_statement               shift and go to state 83
    print_statement                shift and go to state 84
    read_statement                 shift and go to state 85
    empty                          shift and go to state 86
    assignment_expression          shift and go to state 96
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 193

    (40) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (51) statement -> . expression_statement
    (52) statement -> . selection_statement
    (53) statement -> . compound_statement
    (54) statement -> . iteration_statement
    (55) statement -> . jump_statement
    (56) statement -> . assert_statement
    (57) statement -> . print_statement
    (58) statement -> . read_statement
    (43) expression_statement -> . expression SEMI
    (44) expression_statement -> . empty SEMI
    (38) selection_statement -> . IF LPAREN expression RPAREN statement
    (39) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (37) compound_statement -> . LBRACE block_item_list RBRACE
    (40) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (41) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (42) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (49) jump_statement -> . BREAK SEMI
    (50) jump_statement -> . RETURN expression_opt SEMI
    (45) assert_statement -> . ASSERT expression SEMI
    (46) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (47) print_statement -> . PRINT LPAREN empty RPAREN SEMI
    (48) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (99) expression -> . assignment_expression
    (100) expression -> . expression COMMA assignment_expression
    (59) empty -> .
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    IF              shift and go to state 88
    LBRACE          shift and go to state 35
    WHILE           shift and go to state 89
    FOR             shift and go to state 90
    BREAK           shift and go to state 91
    RETURN          shift and go to state 92
    ASSERT          shift and go to state 93
    PRINT           shift and go to state 94
    READ            shift and go to state 95
    SEMI            reduce using rule 59 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    expression                     shift and go to state 87
    statement                      shift and go to state 201
    expression_statement           shift and go to state 78
    selection_statement            shift and go to state 79
    compound_statement             shift and go to state 80
    iteration_statement            shift and go to state 81
    jump_statement                 shift and go to state 82
    assert_statement               shift and go to state 83
    print_statement                shift and go to state 84
    read_statement                 shift and go to state 85
    empty                          shift and go to state 86
    assignment_expression          shift and go to state 96
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 194

    (41) iteration_statement -> FOR LPAREN expression_opt SEMI . expression_opt SEMI expression_opt RPAREN statement
    (101) expression_opt -> . expression
    (102) expression_opt -> . empty
    (99) expression -> . assignment_expression
    (100) expression -> . expression COMMA assignment_expression
    (59) empty -> .
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    SEMI            reduce using rule 59 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    expression_opt                 shift and go to state 202
    expression                     shift and go to state 147
    empty                          shift and go to state 148
    assignment_expression          shift and go to state 96
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 195

    (42) iteration_statement -> FOR LPAREN declaration expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 203


state 196

    (46) print_statement -> PRINT LPAREN expression RPAREN . SEMI

    SEMI            shift and go to state 204


state 197

    (47) print_statement -> PRINT LPAREN empty RPAREN . SEMI

    SEMI            shift and go to state 205


state 198

    (48) read_statement -> READ LPAREN argument_expression RPAREN . SEMI

    SEMI            shift and go to state 206


state 199

    (104) argument_expression -> argument_expression COMMA assignment_expression .

    RPAREN          reduce using rule 104 (argument_expression -> argument_expression COMMA assignment_expression .)
    COMMA           reduce using rule 104 (argument_expression -> argument_expression COMMA assignment_expression .)


state 200

    (38) selection_statement -> IF LPAREN expression RPAREN statement .
    (39) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RBRACE          reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    READ            reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ADDRESS         reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING_CONST    reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 207

  ! ELSE            [ reduce using rule 38 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 201

    (40) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    READ            reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ADDRESS         reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING_CONST    reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 40 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 202

    (41) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 208


state 203

    (42) iteration_statement -> FOR LPAREN declaration expression_opt SEMI . expression_opt RPAREN statement
    (101) expression_opt -> . expression
    (102) expression_opt -> . empty
    (99) expression -> . assignment_expression
    (100) expression -> . expression COMMA assignment_expression
    (59) empty -> .
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    RPAREN          reduce using rule 59 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    expression_opt                 shift and go to state 209
    expression                     shift and go to state 147
    empty                          shift and go to state 148
    assignment_expression          shift and go to state 96
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 204

    (46) print_statement -> PRINT LPAREN expression RPAREN SEMI .

    RBRACE          reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    IF              reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    LBRACE          reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    WHILE           reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    FOR             reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    BREAK           reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    RETURN          reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    ASSERT          reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    PRINT           reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    READ            reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    VOID            reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    CHAR            reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    INT             reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    FLOAT           reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    PLUSPLUS        reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    MINUSMINUS      reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    LPAREN          reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    ADDRESS         reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    TIMES           reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    PLUS            reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    MINUS           reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    NOT             reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    ID              reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    INT_CONST       reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    CHAR_CONST      reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    STRING_CONST    reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    SEMI            reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)
    ELSE            reduce using rule 46 (print_statement -> PRINT LPAREN expression RPAREN SEMI .)


state 205

    (47) print_statement -> PRINT LPAREN empty RPAREN SEMI .

    RBRACE          reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    IF              reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    LBRACE          reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    WHILE           reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    FOR             reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    BREAK           reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    RETURN          reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    ASSERT          reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    PRINT           reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    READ            reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    VOID            reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    CHAR            reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    INT             reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    FLOAT           reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    PLUSPLUS        reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    MINUSMINUS      reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    LPAREN          reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    ADDRESS         reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    TIMES           reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    PLUS            reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    MINUS           reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    NOT             reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    ID              reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    INT_CONST       reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    CHAR_CONST      reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    STRING_CONST    reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    SEMI            reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)
    ELSE            reduce using rule 47 (print_statement -> PRINT LPAREN empty RPAREN SEMI .)


state 206

    (48) read_statement -> READ LPAREN argument_expression RPAREN SEMI .

    RBRACE          reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    IF              reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    LBRACE          reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    WHILE           reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FOR             reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    BREAK           reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    RETURN          reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ASSERT          reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PRINT           reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    READ            reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    VOID            reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    CHAR            reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    INT             reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FLOAT           reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PLUSPLUS        reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    MINUSMINUS      reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    LPAREN          reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ADDRESS         reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    TIMES           reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    PLUS            reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    MINUS           reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    NOT             reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ID              reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    INT_CONST       reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    CHAR_CONST      reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    STRING_CONST    reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    SEMI            reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)
    ELSE            reduce using rule 48 (read_statement -> READ LPAREN argument_expression RPAREN SEMI .)


state 207

    (39) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (51) statement -> . expression_statement
    (52) statement -> . selection_statement
    (53) statement -> . compound_statement
    (54) statement -> . iteration_statement
    (55) statement -> . jump_statement
    (56) statement -> . assert_statement
    (57) statement -> . print_statement
    (58) statement -> . read_statement
    (43) expression_statement -> . expression SEMI
    (44) expression_statement -> . empty SEMI
    (38) selection_statement -> . IF LPAREN expression RPAREN statement
    (39) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (37) compound_statement -> . LBRACE block_item_list RBRACE
    (40) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (41) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (42) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (49) jump_statement -> . BREAK SEMI
    (50) jump_statement -> . RETURN expression_opt SEMI
    (45) assert_statement -> . ASSERT expression SEMI
    (46) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (47) print_statement -> . PRINT LPAREN empty RPAREN SEMI
    (48) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (99) expression -> . assignment_expression
    (100) expression -> . expression COMMA assignment_expression
    (59) empty -> .
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    IF              shift and go to state 88
    LBRACE          shift and go to state 35
    WHILE           shift and go to state 89
    FOR             shift and go to state 90
    BREAK           shift and go to state 91
    RETURN          shift and go to state 92
    ASSERT          shift and go to state 93
    PRINT           shift and go to state 94
    READ            shift and go to state 95
    SEMI            reduce using rule 59 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    expression                     shift and go to state 87
    statement                      shift and go to state 210
    expression_statement           shift and go to state 78
    selection_statement            shift and go to state 79
    compound_statement             shift and go to state 80
    iteration_statement            shift and go to state 81
    jump_statement                 shift and go to state 82
    assert_statement               shift and go to state 83
    print_statement                shift and go to state 84
    read_statement                 shift and go to state 85
    empty                          shift and go to state 86
    assignment_expression          shift and go to state 96
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 208

    (41) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI . expression_opt RPAREN statement
    (101) expression_opt -> . expression
    (102) expression_opt -> . empty
    (99) expression -> . assignment_expression
    (100) expression -> . expression COMMA assignment_expression
    (59) empty -> .
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    RPAREN          reduce using rule 59 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    expression_opt                 shift and go to state 211
    expression                     shift and go to state 147
    empty                          shift and go to state 148
    assignment_expression          shift and go to state 96
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 209

    (42) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 212


state 210

    (39) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RBRACE          reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASSERT          reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PRINT           reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    READ            reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSPLUS        reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSMINUS      reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ADDRESS         reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_CONST       reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT_CONST     reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR_CONST      reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING_CONST    reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 39 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 211

    (41) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 213


state 212

    (42) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN . statement
    (51) statement -> . expression_statement
    (52) statement -> . selection_statement
    (53) statement -> . compound_statement
    (54) statement -> . iteration_statement
    (55) statement -> . jump_statement
    (56) statement -> . assert_statement
    (57) statement -> . print_statement
    (58) statement -> . read_statement
    (43) expression_statement -> . expression SEMI
    (44) expression_statement -> . empty SEMI
    (38) selection_statement -> . IF LPAREN expression RPAREN statement
    (39) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (37) compound_statement -> . LBRACE block_item_list RBRACE
    (40) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (41) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (42) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (49) jump_statement -> . BREAK SEMI
    (50) jump_statement -> . RETURN expression_opt SEMI
    (45) assert_statement -> . ASSERT expression SEMI
    (46) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (47) print_statement -> . PRINT LPAREN empty RPAREN SEMI
    (48) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (99) expression -> . assignment_expression
    (100) expression -> . expression COMMA assignment_expression
    (59) empty -> .
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    IF              shift and go to state 88
    LBRACE          shift and go to state 35
    WHILE           shift and go to state 89
    FOR             shift and go to state 90
    BREAK           shift and go to state 91
    RETURN          shift and go to state 92
    ASSERT          shift and go to state 93
    PRINT           shift and go to state 94
    READ            shift and go to state 95
    SEMI            reduce using rule 59 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    statement                      shift and go to state 214
    expression_statement           shift and go to state 78
    selection_statement            shift and go to state 79
    compound_statement             shift and go to state 80
    iteration_statement            shift and go to state 81
    jump_statement                 shift and go to state 82
    assert_statement               shift and go to state 83
    print_statement                shift and go to state 84
    read_statement                 shift and go to state 85
    expression                     shift and go to state 87
    empty                          shift and go to state 86
    assignment_expression          shift and go to state 96
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 213

    (41) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN . statement
    (51) statement -> . expression_statement
    (52) statement -> . selection_statement
    (53) statement -> . compound_statement
    (54) statement -> . iteration_statement
    (55) statement -> . jump_statement
    (56) statement -> . assert_statement
    (57) statement -> . print_statement
    (58) statement -> . read_statement
    (43) expression_statement -> . expression SEMI
    (44) expression_statement -> . empty SEMI
    (38) selection_statement -> . IF LPAREN expression RPAREN statement
    (39) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (37) compound_statement -> . LBRACE block_item_list RBRACE
    (40) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (41) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (42) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (49) jump_statement -> . BREAK SEMI
    (50) jump_statement -> . RETURN expression_opt SEMI
    (45) assert_statement -> . ASSERT expression SEMI
    (46) print_statement -> . PRINT LPAREN expression RPAREN SEMI
    (47) print_statement -> . PRINT LPAREN empty RPAREN SEMI
    (48) read_statement -> . READ LPAREN argument_expression RPAREN SEMI
    (99) expression -> . assignment_expression
    (100) expression -> . expression COMMA assignment_expression
    (59) empty -> .
    (105) assignment_expression -> . binary_expression
    (106) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) binary_expression -> . cast_expression
    (65) binary_expression -> . binary_expression TIMES binary_expression
    (66) binary_expression -> . binary_expression DIVIDE binary_expression
    (67) binary_expression -> . binary_expression MOD binary_expression
    (68) binary_expression -> . binary_expression PLUS binary_expression
    (69) binary_expression -> . binary_expression MINUS binary_expression
    (70) binary_expression -> . binary_expression LT binary_expression
    (71) binary_expression -> . binary_expression LTE binary_expression
    (72) binary_expression -> . binary_expression GT binary_expression
    (73) binary_expression -> . binary_expression GTE binary_expression
    (74) binary_expression -> . binary_expression EQUALS binary_expression
    (75) binary_expression -> . binary_expression NE binary_expression
    (76) binary_expression -> . binary_expression AND binary_expression
    (77) binary_expression -> . binary_expression OR binary_expression
    (80) unary_expression -> . postfix_expression
    (81) unary_expression -> . PLUSPLUS unary_expression
    (82) unary_expression -> . MINUSMINUS unary_expression
    (83) unary_expression -> . unary_operator cast_expression
    (78) cast_expression -> . unary_expression
    (79) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (89) postfix_expression -> . primary_expression
    (90) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (91) postfix_expression -> . postfix_expression LPAREN argument_expression RPAREN
    (92) postfix_expression -> . postfix_expression LPAREN RPAREN
    (93) postfix_expression -> . postfix_expression PLUSPLUS
    (94) postfix_expression -> . postfix_expression MINUSMINUS
    (84) unary_operator -> . ADDRESS
    (85) unary_operator -> . TIMES
    (86) unary_operator -> . PLUS
    (87) unary_operator -> . MINUS
    (88) unary_operator -> . NOT
    (113) primary_expression -> . identifier
    (114) primary_expression -> . constant
    (115) primary_expression -> . LPAREN expression RPAREN
    (116) identifier -> . ID
    (95) constant -> . INT_CONST
    (96) constant -> . FLOAT_CONST
    (97) constant -> . CHAR_CONST
    (98) constant -> . STRING_CONST

    IF              shift and go to state 88
    LBRACE          shift and go to state 35
    WHILE           shift and go to state 89
    FOR             shift and go to state 90
    BREAK           shift and go to state 91
    RETURN          shift and go to state 92
    ASSERT          shift and go to state 93
    PRINT           shift and go to state 94
    READ            shift and go to state 95
    SEMI            reduce using rule 59 (empty -> .)
    PLUSPLUS        shift and go to state 48
    MINUSMINUS      shift and go to state 49
    LPAREN          shift and go to state 46
    ADDRESS         shift and go to state 52
    TIMES           shift and go to state 42
    PLUS            shift and go to state 43
    MINUS           shift and go to state 44
    NOT             shift and go to state 53
    ID              shift and go to state 16
    INT_CONST       shift and go to state 56
    FLOAT_CONST     shift and go to state 57
    CHAR_CONST      shift and go to state 58
    STRING_CONST    shift and go to state 59

    statement                      shift and go to state 215
    expression_statement           shift and go to state 78
    selection_statement            shift and go to state 79
    compound_statement             shift and go to state 80
    iteration_statement            shift and go to state 81
    jump_statement                 shift and go to state 82
    assert_statement               shift and go to state 83
    print_statement                shift and go to state 84
    read_statement                 shift and go to state 85
    expression                     shift and go to state 87
    empty                          shift and go to state 86
    assignment_expression          shift and go to state 96
    binary_expression              shift and go to state 71
    unary_expression               shift and go to state 72
    cast_expression                shift and go to state 41
    postfix_expression             shift and go to state 47
    unary_operator                 shift and go to state 50
    primary_expression             shift and go to state 51
    identifier                     shift and go to state 54
    constant                       shift and go to state 55

state 214

    (42) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .

    RBRACE          reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LBRACE          reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ASSERT          reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PRINT           reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    READ            reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    VOID            reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CHAR            reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT             reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT           reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PLUSPLUS        reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    MINUSMINUS      reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ADDRESS         reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    NOT             reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ID              reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST       reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_CONST     reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_CONST      reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    STRING_CONST    reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 42 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)


state 215

    (41) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .

    RBRACE          reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    IF              reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LBRACE          reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ASSERT          reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PRINT           reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    READ            reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    VOID            reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR            reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT             reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT           reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUSPLUS        reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUSMINUS      reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ADDRESS         reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    NOT             reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ID              reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST       reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_CONST     reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_CONST      reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STRING_CONST    reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 41 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 200 resolved as shift
